{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/app/components/table/table.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TableService","this","sortSource","Subject","selectionSource","contextMenuSource","valueSource","totalRecordsSource","columnsSource","resetSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","valueSource$","totalRecordsSource$","columnsSource$","resetSource$","prototype","onSort","sortMeta","onSelectionChange","onResetChange","onContextMenu","data","onValueChange","onTotalRecordsChange","onColumnsChange","columns","Injectable","Table","el","zone","tableService","cd","filterService","pageLinks","alwaysShowPaginator","paginatorPosition","paginatorDropdownScrollHeight","currentPageReportTemplate","showFirstLastIcon","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","rowTrackBy","index","item","lazy","lazyLoadOnInit","compareSelectionBy","csvSeparator","exportFilename","filters","filterDelay","expandedRowKeys","editingRowKeys","rowExpandMode","virtualScrollDelay","virtualRowHeight","columnResizeMode","loadingIcon","showLoader","showInitialSortBadge","stateStorage","editMode","onRowSelect","onRowUnselect","onPage","onFilter","onLazyLoad","onRowExpand","onRowCollapse","onContextMenuSelect","onColResize","onColReorder","onRowReorder","onEditInit","onEditComplete","onEditCancel","onHeaderCheckboxToggle","sortFunction","firstChange","rowsChange","onStateSave","onStateRestore","_value","_totalRecords","_first","selectionKeys","_sortOrder","ngOnInit","virtualScroll","emit","createLazyLoadMetadata","restoringFilter","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","expandedRowTemplate","frozenRowsTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","frozenExpandedRowTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","ngAfterViewInit","isStateful","resizableColumns","restoreColumnWidths","ngOnChanges","simpleChange","stateRestored","restoreState","currentValue","totalRecords","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","_columns","reorderableColumns","columnOrderStateRestored","restoreColumnOrder","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","defineProperty","val","cols","_rows","dataKey","Array","isArray","_c","_d","String","ObjectUtils","resolveFieldData","onPageChange","event","first","rows","saveState","anchorRowIndex","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","restoringSort","customSort","mode","data1","data2","value1","value2","result","localeCompare","multisortField","multisortmeta","isSorted","sorted","handleRowClick","target","targetNode","nodeName","parentNode","parentElement","DomHandler","hasClass","selectionMode","isMultipleSelectionMode","shiftKey","clearSelection","rangeRowIndex","clearSelectionRange","rowIndex","selectRange","rowData","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","rangeStart","rangeEnd","paginator","rangeRowsData","rangeRowData","filteredValue","this_1","selectionIndex","undefined","equals","toggleRowWithRadio","toggleRowWithCheckbox","selectionIndex_3","toggleRowsWithCheckbox","check","slice","checked","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","localMatch","globalMatch","localFiltered","prop","hasOwnProperty","filterField","filterMeta","filterMeta_1","e_2","filterMeta_1_1","meta","executeLocalFilter","operator","FilterOperator","OR","AND","j","globalFilterField","filterLocale","markForCheck","filterValue","filterMatchMode","FilterMatchMode","STARTS_WITH","dataFieldValue","filterConstraint","empty","globalFilter","clear","reset","exportCSV","options","csv","frozenColumns","selectionOnly","frozenValue","column","exportable","header","record","i_1","cellData","exportFunction","replace","blob","Blob","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","URL","createObjectURL","click","open","encodeURI","removeChild","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","updateEditingCell","cell","editingCell","editingCellData","editingCellField","editingCellRowIndex","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","removeClass","unbindDocumentEditListener","addEventListener","removeEventListener","initRowEdit","saveRowEdit","rowElement","cancelRowEdit","toggleRow","preventDefault","isRowExpanded","isRowEditing","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","nativeElement","left","lastResizerHelperX","pageX","scrollLeft","onColumnResize","addClass","resizeHelperViewChild","height","offsetHeight","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","minWidth","parseInt","newColumnWidth","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","setScrollableItemsWidthOnExpandResize","tableViewChild","containerWidth","element","scrollableBody","scrollableHeader","scrollableFooter","frozenWidth","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","parent","colGroup","children","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","dragIndex","indexWithinGroup","dropIndex","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","allowDrop","reorderArray","runOutsideAngular","draggable","onRowDragStart","rowDragging","draggedRowIndex","onRowDragOver","rowY","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","droppedRowIndex","onRowDragLeave","onRowDragEnd","onRowDrop","isEmpty","getBlockableElement","getStorage","localStorage","sessionStorage","stateKey","storage","state","saveColumnWidths","saveColumnOrder","keys","setItem","JSON","stringify","clearState","removeItem","stateString","getItem","dateFormat","state_1","parse","key","test","Date","columnWidthsState","columnWidths","tableWidthState","tableWidth","Promise","resolve","then","widths","map","getOuterWidth","join","widths_1","split","headerCols","bodyCols","columnOrder_1","columnOrder","reorderedColumns_1","findColumnByKey","ngOnDestroy","Component","args","selector","providers","changeDetection","ChangeDetectionStrategy","Default","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","ChangeDetectorRef","FilterService","Input","Output","ViewChild","ContentChildren","PrimeTemplate","TableBody","dt","subscription","subscribe","detectChanges","unsubscribe","ScrollableView","_scrollHeight","includes","console","log","virtualScrollBody","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenView","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","onScrollIndexChange","virtualScrollTimeout","page","floor","virtualScrollOffset","virtualScrollChunkSize","virtualPage","getPageCount","dataToRender","dataLength","scrollToIndex","CdkVirtualScrollViewport","SortableColumn","isEnabled","updateSortState","onClick","isFilterElement","onEnterKey","pSortableColumnDisabled","Directive","host","[class.p-sortable-column]","[class.p-highlight]","[attr.tabindex]","[attr.role]","[attr.aria-sort]","HostListener","SortIcon","getMultiSortMetaIndex","isMultiSorted","OnPush","SelectableRow","onTouchEnd","onArrowDownKeyDown","row","currentTarget","nextRow","findNextSelectableRow","focus","onArrowUpKeyDown","prevRow","findPrevSelectableRow","onEnterKeyDown","onPageDownKeyDown","onSpaceKeydown","pSelectableRowDisabled","[class.p-selectable-row]","SelectableRowDblClick","ContextMenuRow","pContextMenuRowDisabled","[class.p-highlight-contextmenu]","RowToggler","pRowTogglerDisabled","ResizableColumn","resizer","className","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","which","pResizableColumnDisabled","ReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","pReorderableColumnDisabled","EditableColumn","closeEditingCell","openCell","focusCellSelector","pFocusCellSelector","focusableElement","completed","onEscapeKeyDown","onShiftKeyDown","moveToPreviousCell","moveToNextCell","onArrowDown","currentCell","findCell","cellIndex","targetCell","findNextEditableColumnByIndex","invokeElementMethod","onArrowUp","findPrevEditableColumnByIndex","onArrowLeft","onArrowRight","findPreviousEditableColumn","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","firstElementChild","pEditableColumnDisabled","EditableRow","pEditableRowDisabled","InitEditableRow","editableRow","SaveEditableRow","CancelEditableRow","CellEditor","editableColumn","inputTemplate","outputTemplate","decorators","Optional","TableRadioButton","disabled","onFocus","focused","onBlur","TableCheckbox","TableHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","isDisabled","isAllFilteredValuesChecked","ReorderableRowHandle","ReorderableRow","droppable","dragEndListener","onDragEnd","pReorderableRowDisabled","ColumnFilterFormElement","useGrouping","filterCallback","onModelChange","onTextInputEnterKeyDown","onNumericInputKeyDown","ColumnFilter","renderer","config","showMenu","showOperator","showClearButton","showApplyButton","showMatchModes","showAddButton","hideOnClear","maxConstraints","initFieldFilterConstraint","translationSubscription","translationObserver","generateMatchModeOptions","generateOperatorOptions","resetSubscription","clearFilter","matchModes","matchModeOptions","_a","filterMatchModeOptions","label","getTranslation","operatorOptions","TranslationKeys","MATCH_ALL","MATCH_ANY","filterTemplate","defaultMatchMode","getDefaultMatchMode","onMenuMatchModeChange","onRowMatchModeChange","hide","onRowMatchModeKeyDown","nextItem","findNextItem","removeAttribute","tabIndex","prevItem","findPrevItem","onRowClearItemClick","isRowMatchModeSelected","addConstraint","getDefaultOperator","removeConstraint","onOperatorChange","toggleMenu","overlayVisible","onToggleButtonKeyDown","focusable","getFocusableElements","overlay","altKey","onEscape","icon","onOverlayAnimationStart","toState","zIndex","zindex","absolutePosition","bindDocumentClickListener","bindDocumentResizeListener","bindScrollListener","onOverlayHide","EQUALS","DATE_IS","CONTAINS","hasRowFilter","fieldConstraints","APPLY","CLEAR","ADD_RULE","REMOVE_RULE","NO_FILTER","fieldFilter","isOutsideClicked","isSameNode","contains","documentClickListener","documentTarget","ownerDocument","listen","unbindDocumentClickListener","documentResizeListener","unbindDocumentResizeListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","applyFilter","animations","trigger","transition","opacity","transform","animate","Renderer2","PrimeNGConfig","NgModule","imports","CommonModule","PaginatorModule","InputTextModule","DropdownModule","ScrollingModule","FormsModule","ButtonModule","SelectButtonModule","CalendarModule","InputNumberModule","TriStateCheckboxModule","exports","SharedModule","declarations"],"mappings":";;;;;;;;;;;;;;oFA2G6BA,OAAOC,gBAYpBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAII,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEE,KAAKN,GACrB,GAAIA,GAAyB,iBAAbA,EAAEO,OAAqB,MAAO,CAC1CC,KAAM,WAEF,OADIR,GAAKK,GAAKL,EAAEO,SAAQP,OAAI,GACrB,CAAES,MAAOT,GAAKA,EAAEK,KAAMK,MAAOV,KAG5C,MAAM,IAAIW,UAAUV,EAAI,0BAA4B,4CAGxCW,EAAOZ,EAAGa,GACtB,IAAIT,EAAsB,mBAAXF,QAAyBF,EAAEE,OAAOC,UACjD,IAAKC,EAAG,OAAOJ,EACf,IAAmBc,EAAYC,EAA3BV,EAAID,EAAEE,KAAKN,GAAOgB,EAAK,GAC3B,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIT,EAAEG,QAAQE,MAAMM,EAAGC,KAAKH,EAAEL,OAExE,MAAOS,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQJ,IAAMA,EAAEJ,OAASN,EAAIC,EAAU,SAAID,EAAEE,KAAKD,WAExC,GAAIU,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,WAIKG,IACZ,IAAK,IAAIH,EAAK,GAAIX,EAAI,EAAGA,EAAIe,UAAUb,OAAQF,IAC3CW,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUf,KACpC,OAAOW,EAyDcnB,OAAOC,wBCzLhC,SAAAwB,IAGYC,KAAAC,WAAa,IAAIC,EAAAA,QACjBF,KAAAG,gBAAkB,IAAID,EAAAA,QACtBF,KAAAI,kBAAoB,IAAIF,EAAAA,QACxBF,KAAAK,YAAc,IAAIH,EAAAA,QAClBF,KAAAM,mBAAqB,IAAIJ,EAAAA,QACzBF,KAAAO,cAAgB,IAAIL,EAAAA,QACpBF,KAAAQ,YAAc,IAAIN,EAAAA,QAE1BF,KAAAS,YAAcT,KAAKC,WAAWS,eAC9BV,KAAAW,iBAAmBX,KAAKG,gBAAgBO,eACxCV,KAAAY,mBAAqBZ,KAAKI,kBAAkBM,eAC5CV,KAAAa,aAAeb,KAAKK,YAAYK,eAChCV,KAAAc,oBAAsBd,KAAKM,mBAAmBI,eAC9CV,KAAAe,eAAiBf,KAAKO,cAAcG,eACpCV,KAAAgB,aAAehB,KAAKQ,YAAYE,sBAEhCX,EAAAkB,UAAAC,OAAA,SAAOC,GACHnB,KAAKC,WAAWhB,KAAKkC,IAGzBpB,EAAAkB,UAAAG,kBAAA,WACIpB,KAAKG,gBAAgBlB,QAGzBc,EAAAkB,UAAAI,cAAA,WACIrB,KAAKQ,YAAYvB,QAGrBc,EAAAkB,UAAAK,cAAA,SAAcC,GACVvB,KAAKI,kBAAkBnB,KAAKsC,IAGhCxB,EAAAkB,UAAAO,cAAA,SAActC,GACVc,KAAKK,YAAYpB,KAAKC,IAG1Ba,EAAAkB,UAAAQ,qBAAA,SAAqBvC,GACjBc,KAAKM,mBAAmBrB,KAAKC,IAGjCa,EAAAkB,UAAAS,gBAAA,SAAgBC,GACZ3B,KAAKO,cAActB,KAAK0C,6BA5C/BC,EAAAA,8BAwZG,SAAAC,EAAmBC,EAAuBC,EAAqBC,EAAmCC,EAA8BC,GAA7GlC,KAAA8B,GAAAA,EAAuB9B,KAAA+B,KAAAA,EAAqB/B,KAAAgC,aAAAA,EAAmChC,KAAAiC,GAAAA,EAA8BjC,KAAAkC,cAAAA,EA5RvHlC,KAAAmC,UAAoB,EAIpBnC,KAAAoC,qBAA+B,EAE/BpC,KAAAqC,kBAA4B,SAI5BrC,KAAAsC,8BAAwC,QAExCtC,KAAAuC,0BAAoC,gCAMpCvC,KAAAwC,mBAA6B,EAE7BxC,KAAAyC,eAAyB,EAEzBzC,KAAA0C,iBAA2B,EAE3B1C,KAAA2C,SAAmB,SAEnB3C,KAAA4C,iBAA2B,EAI1B5C,KAAA6C,gBAAqC,IAAIC,EAAAA,aAIzC9C,KAAA+C,2BAAgD,IAAID,EAAAA,aAErD9C,KAAAgD,yBAAmC,WAMnChD,KAAAiD,WAAuB,SAACC,EAAeC,GAAc,OAAAA,GAErDnD,KAAAoD,MAAgB,EAEhBpD,KAAAqD,gBAA0B,EAE1BrD,KAAAsD,mBAA6B,aAE7BtD,KAAAuD,aAAuB,IAEvBvD,KAAAwD,eAAyB,WAEzBxD,KAAAyD,QAA8D,GAI9DzD,KAAA0D,YAAsB,IAItB1D,KAAA2D,gBAA6C,GAE7C3D,KAAA4D,eAA4C,GAE5C5D,KAAA6D,cAAwB,WAQxB7D,KAAA8D,mBAA6B,IAE7B9D,KAAA+D,iBAA2B,GAU3B/D,KAAAgE,iBAA2B,MAM3BhE,KAAAiE,YAAsB,gBAEtBjE,KAAAkE,YAAsB,EAMtBlE,KAAAmE,sBAAgC,EAQhCnE,KAAAoE,aAAuB,UAEvBpE,KAAAqE,SAAmB,OAMlBrE,KAAAsE,YAAiC,IAAIxB,EAAAA,aAErC9C,KAAAuE,cAAmC,IAAIzB,EAAAA,aAEvC9C,KAAAwE,OAA4B,IAAI1B,EAAAA,aAEhC9C,KAAAkB,OAA4B,IAAI4B,EAAAA,aAEhC9C,KAAAyE,SAA8B,IAAI3B,EAAAA,aAElC9C,KAAA0E,WAAgC,IAAI5B,EAAAA,aAEpC9C,KAAA2E,YAAiC,IAAI7B,EAAAA,aAErC9C,KAAA4E,cAAmC,IAAI9B,EAAAA,aAEvC9C,KAAA6E,oBAAyC,IAAI/B,EAAAA,aAE7C9C,KAAA8E,YAAiC,IAAIhC,EAAAA,aAErC9C,KAAA+E,aAAkC,IAAIjC,EAAAA,aAEtC9C,KAAAgF,aAAkC,IAAIlC,EAAAA,aAEtC9C,KAAAiF,WAAgC,IAAInC,EAAAA,aAEpC9C,KAAAkF,eAAoC,IAAIpC,EAAAA,aAExC9C,KAAAmF,aAAkC,IAAIrC,EAAAA,aAEtC9C,KAAAoF,uBAA4C,IAAItC,EAAAA,aAEhD9C,KAAAqF,aAAkC,IAAIvC,EAAAA,aAEtC9C,KAAAsF,YAAoC,IAAIxC,EAAAA,aAExC9C,KAAAuF,WAAmC,IAAIzC,EAAAA,aAEvC9C,KAAAwF,YAAiC,IAAI1C,EAAAA,aAErC9C,KAAAyF,eAAoC,IAAI3C,EAAAA,aAkBlD9C,KAAA0F,OAAgB,GAIhB1F,KAAA2F,cAAwB,EAExB3F,KAAA4F,OAAiB,EA0CjB5F,KAAA6F,cAAqB,GAkCrB7F,KAAA8F,WAAqB,SA8BrBjE,EAAAZ,UAAA8E,SAAA,WACQ/F,KAAKoD,MAAQpD,KAAKqD,iBACbrD,KAAKgG,eACNhG,KAAK0E,WAAWuB,KAAKjG,KAAKkG,0BAG1BlG,KAAKmG,kBACLnG,KAAKmG,iBAAkB,IAI/BnG,KAAKoG,aAAc,GAGvBvE,EAAAZ,UAAAoF,mBAAA,WAAA,IAAAC,EAAAtG,KACIA,KAAKuG,UAAUC,SAAQ,SAACrD,GACpB,OAAQA,EAAKsD,WACT,IAAK,UACDH,EAAKI,gBAAkBvD,EAAKwD,SAChC,MAEA,IAAK,SACDL,EAAKM,eAAiBzD,EAAKwD,SAC/B,MAEA,IAAK,OACDL,EAAKO,aAAe1D,EAAKwD,SAC7B,MAEA,IAAK,cACDL,EAAKQ,oBAAsB3D,EAAKwD,SACpC,MAEA,IAAK,SACDL,EAAKS,eAAiB5D,EAAKwD,SAC/B,MAEA,IAAK,UACDL,EAAKU,gBAAkB7D,EAAKwD,SAChC,MAEA,IAAK,WACDL,EAAKW,iBAAmB9D,EAAKwD,SACjC,MAEA,IAAK,eACDL,EAAKY,oBAAsB/D,EAAKwD,SACpC,MAEA,IAAK,aACDL,EAAKa,mBAAqBhE,EAAKwD,SACnC,MAEA,IAAK,eACDL,EAAKc,qBAAuBjE,EAAKwD,SACrC,MAEA,IAAK,aACDL,EAAKe,mBAAqBlE,EAAKwD,SACnC,MAEA,IAAK,eACDL,EAAKgB,qBAAuBnE,EAAKwD,SACrC,MAEA,IAAK,iBACDL,EAAKiB,uBAAyBpE,EAAKwD,SACvC,MAEA,IAAK,qBACDL,EAAKkB,0BAA4BrE,EAAKwD,SAC1C,MAEA,IAAK,eACDL,EAAKmB,qBAAuBtE,EAAKwD,SACrC,MAEA,IAAK,gBACDL,EAAKoB,sBAAwBvE,EAAKwD,SACtC,MAEA,IAAK,iBACDL,EAAKqB,uBAAyBxE,EAAKwD,SACvC,MAEA,IAAK,wBACDL,EAAKsB,8BAAgCzE,EAAKwD,cAM1D9E,EAAAZ,UAAA4G,gBAAA,WACQ7H,KAAK8H,cAAgB9H,KAAK+H,kBAC1B/H,KAAKgI,uBAIbnG,EAAAZ,UAAAgH,YAAA,SAAYC,GACJA,EAAahJ,QACTc,KAAK8H,eAAiB9H,KAAKmI,eAC3BnI,KAAKoI,eAGTpI,KAAK0F,OAASwC,EAAahJ,MAAMmJ,aAE5BrI,KAAKoD,OACNpD,KAAKsI,aAAgBtI,KAAK0F,OAAS1F,KAAK0F,OAAO1G,OAAS,EAEnC,UAAjBgB,KAAK2C,UAAwB3C,KAAKuI,UAClCvI,KAAKwI,aACiB,YAAjBxI,KAAK2C,UAA0B3C,KAAKyI,cACzCzI,KAAK0I,eACA1I,KAAK2I,aACV3I,KAAK4I,WAGb5I,KAAKgC,aAAaR,cAAc0G,EAAahJ,MAAMmJ,eAGnDH,EAAavG,UACb3B,KAAK6I,SAAWX,EAAavG,QAAQ0G,aACrCrI,KAAKgC,aAAaN,gBAAgBwG,EAAavG,QAAQ0G,cAEnDrI,KAAK6I,UAAY7I,KAAK8H,cAAgB9H,KAAK8I,qBAAuB9I,KAAK+I,0BACvE/I,KAAKgJ,sBAITd,EAAaK,YACbvI,KAAKiJ,WAAaf,EAAaK,UAAUF,aAGnCrI,KAAKoD,OAAQpD,KAAKoG,aACE,WAAlBpG,KAAK2C,UACL3C,KAAKwI,cAKbN,EAAagB,YACblJ,KAAK8F,WAAaoC,EAAagB,UAAUb,aAGnCrI,KAAKoD,OAAQpD,KAAKoG,aACE,WAAlBpG,KAAK2C,UACL3C,KAAKwI,cAKbN,EAAaO,gBACbzI,KAAKmJ,eAAiBjB,EAAaO,cAAcJ,aAC3B,aAAlBrI,KAAK2C,WAA4B3C,KAAKoG,cAAiBpG,KAAKoD,MAASpD,KAAKgG,gBAC1EhG,KAAK0I,gBAITR,EAAakB,YACbpJ,KAAKqJ,WAAanB,EAAakB,UAAUf,aAEpCrI,KAAKsJ,oCACNtJ,KAAKuJ,sBACLvJ,KAAKgC,aAAaZ,qBAEtBpB,KAAKsJ,mCAAoC,IAIjDhL,OAAAkL,eAAa3H,EAAAZ,UAAA,QAAK,KAAlB,WACI,OAAOjB,KAAK0F,YAEhB,SAAU+D,GACNzJ,KAAK0F,OAAS+D,mCAGlBnL,OAAAkL,eAAa3H,EAAAZ,UAAA,UAAO,KAApB,WACI,OAAOjB,KAAK6I,cAEhB,SAAYa,GACR1J,KAAK6I,SAAWa,mCAGpBpL,OAAAkL,eAAa3H,EAAAZ,UAAA,QAAK,KAAlB,WACI,OAAOjB,KAAK4F,YAEhB,SAAU6D,GACNzJ,KAAK4F,OAAS6D,mCAGlBnL,OAAAkL,eAAa3H,EAAAZ,UAAA,OAAI,KAAjB,WACI,OAAOjB,KAAK2J,WAEhB,SAASF,GACLzJ,KAAK2J,MAAQF,mCAGjBnL,OAAAkL,eAAa3H,EAAAZ,UAAA,eAAY,KAAzB,WACI,OAAOjB,KAAK2F,mBAEhB,SAAiB8D,GACbzJ,KAAK2F,cAAgB8D,EACrBzJ,KAAKgC,aAAaP,qBAAqBzB,KAAK2F,gDAGhDrH,OAAAkL,eAAa3H,EAAAZ,UAAA,YAAS,KAAtB,WACI,OAAOjB,KAAKiJ,gBAGhB,SAAcQ,GACVzJ,KAAKiJ,WAAaQ,mCAGtBnL,OAAAkL,eAAa3H,EAAAZ,UAAA,YAAS,KAAtB,WACI,OAAOjB,KAAK8F,gBAEhB,SAAc2D,GACVzJ,KAAK8F,WAAa2D,mCAGtBnL,OAAAkL,eAAa3H,EAAAZ,UAAA,gBAAa,KAA1B,WACI,OAAOjB,KAAKmJ,oBAGhB,SAAkBM,GACdzJ,KAAKmJ,eAAiBM,mCAG1BnL,OAAAkL,eAAa3H,EAAAZ,UAAA,YAAS,KAAtB,WACI,OAAOjB,KAAKqJ,gBAGhB,SAAcI,GACVzJ,KAAKqJ,WAAaI,mCAGtB5H,EAAAZ,UAAAsI,oBAAA,mBACI,GAAIvJ,KAAK4J,SAAW5J,KAAKqJ,WAErB,GADArJ,KAAK6F,cAAgB,GACjBgE,MAAMC,QAAQ9J,KAAKqJ,gBACnB,IAAgB,IAAAU,EAAAvL,EAAAwB,KAAKqJ,YAAUW,EAAAD,EAAA9K,QAAA+K,EAAA7K,KAAA6K,EAAAD,EAAA9K,OAAE,CAA7B,IAAIsC,EAAIyI,EAAA9K,MACRc,KAAK6F,cAAcoE,OAAOC,EAAAA,YAAYC,iBAAiB5I,EAAMvB,KAAK4J,WAAa,yGAInF5J,KAAK6F,cAAcoE,OAAOC,EAAAA,YAAYC,iBAAiBnK,KAAKqJ,WAAYrJ,KAAK4J,WAAa,GAKtG/H,EAAAZ,UAAAmJ,aAAA,SAAaC,GACTrK,KAAKsK,MAAQD,EAAMC,MACnBtK,KAAKuK,KAAOF,EAAME,KAEdvK,KAAKoD,MACLpD,KAAK0E,WAAWuB,KAAKjG,KAAKkG,0BAG9BlG,KAAKwE,OAAOyB,KAAK,CACbqE,MAAOtK,KAAKsK,MACZC,KAAMvK,KAAKuK,OAGfvK,KAAKsF,YAAYW,KAAKjG,KAAKsK,OAC3BtK,KAAKuF,WAAWU,KAAKjG,KAAKuK,MAC1BvK,KAAKgC,aAAaR,cAAcxB,KAAKd,OAEjCc,KAAK8H,cACL9H,KAAKwK,YAGTxK,KAAKyK,eAAiB,KAElBzK,KAAK0K,YACL1K,KAAK2K,kBAIb9I,EAAAZ,UAAA2J,KAAA,SAAKP,GACD,IAAIQ,EAAgBR,EAAMQ,cAiB1B,GAfsB,WAAlB7K,KAAK2C,WACL3C,KAAK8F,WAAc9F,KAAKuI,YAAc8B,EAAMS,OAA2B,EAAlB9K,KAAKkJ,UAAiBlJ,KAAK0C,iBAChF1C,KAAKiJ,WAAaoB,EAAMS,MAEpB9K,KAAK4C,kBACL5C,KAAK4F,OAAS,EACd5F,KAAKsF,YAAYW,KAAKjG,KAAK4F,QAEvB5F,KAAK0K,YACL1K,KAAK2K,kBAIb3K,KAAKwI,cAEa,aAAlBxI,KAAK2C,SAAyB,CAC9B,IAAIoI,EAAUF,EAAcE,SAAWF,EAAcG,QACjD7J,EAAWnB,KAAKiL,YAAYZ,EAAMS,OAElC3J,EACK4J,EAaD5J,EAAS+J,OAA0B,EAAlB/J,EAAS+J,OAZ1BlL,KAAKmJ,eAAiB,CAAC,CAAE2B,MAAOT,EAAMS,MAAOI,OAAyB,EAAlB/J,EAAS+J,QAEzDlL,KAAK4C,kBACL5C,KAAK4F,OAAS,EACd5F,KAAKsF,YAAYW,KAAKjG,KAAK4F,QAEvB5F,KAAK0K,YACL1K,KAAK2K,oBASZI,GAAY/K,KAAKyI,gBAClBzI,KAAKmJ,eAAiB,GAElBnJ,KAAK4C,kBACL5C,KAAK4F,OAAS,EACd5F,KAAKsF,YAAYW,KAAKjG,KAAK4F,UAGnC5F,KAAKmJ,eAAezJ,KAAK,CAAEoL,MAAOT,EAAMS,MAAOI,MAAOlL,KAAK0C,oBAG/D1C,KAAK0I,eAGL1I,KAAK8H,cACL9H,KAAKwK,YAGTxK,KAAKyK,eAAiB,MAG1B5I,EAAAZ,UAAAuH,WAAA,WAAA,IAAAlC,EAAAtG,KACI,GAAIA,KAAKuI,WAAavI,KAAKkJ,UAAW,CAC9BlJ,KAAKmL,gBACLnL,KAAKmL,eAAgB,GAGrBnL,KAAKoD,KACLpD,KAAK0E,WAAWuB,KAAKjG,KAAKkG,0BAErBlG,KAAKd,QACNc,KAAKoL,WACLpL,KAAKqF,aAAaY,KAAK,CACnB1E,KAAMvB,KAAKd,MACXmM,KAAMrL,KAAK2C,SACXmI,MAAO9K,KAAKuI,UACZ2C,MAAOlL,KAAKkJ,aAIhBlJ,KAAKd,MAAM0L,MAAK,SAACU,EAAOC,GACpB,IAAIC,EAAStB,EAAAA,YAAYC,iBAAiBmB,EAAOhF,EAAKiC,WAClDkD,EAASvB,EAAAA,YAAYC,iBAAiBoB,EAAOjF,EAAKiC,WAClDmD,EAAS,KAab,OAVIA,EADU,MAAVF,GAA4B,MAAVC,GACR,EACK,MAAVD,GAA4B,MAAVC,EACd,EACM,MAAVD,GAA4B,MAAVC,EACd,EACc,iBAAXD,GAAyC,iBAAXC,EACjCD,EAAOG,cAAcF,GAEpBD,EAASC,GAAW,EAAKD,EAASC,EAAU,EAAI,EAEtDnF,EAAK4C,UAAYwC,KAG7B1L,KAAK0F,OAAM9F,EAAOI,KAAKd,QAGvBc,KAAK2I,aACL3I,KAAK4I,WAIb,IAAIzH,EAAqB,CACrB2J,MAAO9K,KAAKuI,UACZ2C,MAAOlL,KAAKkJ,WAGhBlJ,KAAKkB,OAAO+E,KAAK9E,GACjBnB,KAAKgC,aAAad,OAAOC,KAIjCU,EAAAZ,UAAAyH,aAAA,WAAA,IAAApC,EAAAtG,KACQA,KAAKyI,gBACDzI,KAAKoD,KACLpD,KAAK0E,WAAWuB,KAAKjG,KAAKkG,0BAErBlG,KAAKd,QACNc,KAAKoL,WACLpL,KAAKqF,aAAaY,KAAK,CACnB1E,KAAMvB,KAAKd,MACXmM,KAAMrL,KAAK2C,SACX8F,cAAezI,KAAKyI,iBAIxBzI,KAAKd,MAAM0L,MAAK,SAACU,EAAOC,GACpB,OAAOjF,EAAKsF,eAAeN,EAAOC,EAAOjF,EAAKmC,cAAe,MAGjEzI,KAAK0F,OAAM9F,EAAOI,KAAKd,QAGvBc,KAAK2I,aACL3I,KAAK4I,WAIb5I,KAAKkB,OAAO+E,KAAK,CACb4F,cAAe7L,KAAKyI,gBAExBzI,KAAKgC,aAAad,OAAOlB,KAAKyI,iBAItC5G,EAAAZ,UAAA2K,eAAA,SAAeN,EAAOC,EAAO9C,EAAevF,GACxC,IAAIsI,EAAStB,EAAAA,YAAYC,iBAAiBmB,EAAO7C,EAAcvF,GAAO4H,OAClEW,EAASvB,EAAAA,YAAYC,iBAAiBoB,EAAO9C,EAAcvF,GAAO4H,OAClEY,EAAS,KAEb,GAAc,MAAVF,GAA4B,MAAVC,EAClBC,GAAU,OACT,GAAc,MAAVF,GAA4B,MAAVC,EACvBC,EAAS,OACR,GAAc,MAAVF,GAA4B,MAAVC,EACvBC,EAAS,OACR,GAAqB,iBAAVF,GAAsBA,aAAkBvB,QACpD,GAAIuB,EAAOG,eAAkBH,GAAUC,EACnC,OAAQhD,EAAcvF,GAAOgI,MAAQM,EAAOG,cAAcF,QAI9DC,EAAUF,EAASC,GAAW,EAAI,EAGtC,OAAID,GAAUC,EACFhD,EAAczJ,OAAS,EAAC,EAAegB,KAAK4L,eAAeN,EAAOC,EAAO9C,EAAevF,EAAQ,GAAM,EAG1GuF,EAAcvF,GAAOgI,MAAQQ,GAGzC7J,EAAAZ,UAAAgK,YAAA,SAAYH,GACR,GAAI9K,KAAKyI,eAAiBzI,KAAKyI,cAAczJ,OACzC,IAAK,IAAIF,EAAI,EAAGA,EAAIkB,KAAKyI,cAAczJ,OAAQF,IAC3C,GAAIkB,KAAKyI,cAAc3J,GAAGgM,QAAUA,EAChC,OAAO9K,KAAKyI,cAAc3J,GAKtC,OAAO,MAGX+C,EAAAZ,UAAA6K,SAAA,SAAShB,GACL,GAAsB,WAAlB9K,KAAK2C,SACL,OAAQ3C,KAAKuI,WAAavI,KAAKuI,YAAcuC,EAE5C,GAAsB,aAAlB9K,KAAK2C,SAAyB,CACnC,IAAIoJ,GAAS,EACb,GAAI/L,KAAKyI,cACL,IAAI,IAAI3J,EAAI,EAAGA,EAAIkB,KAAKyI,cAAczJ,OAAQF,IAC1C,GAAIkB,KAAKyI,cAAc3J,GAAGgM,OAASA,EAAO,CACtCiB,GAAS,EACT,MAIZ,OAAOA,IAIflK,EAAAZ,UAAA+K,eAAA,SAAe3B,GACX,IAAI4B,EAAwB5B,EAAMQ,cAAcoB,OAC5CC,EAAaD,EAAOE,SACpBC,EAAaH,EAAOI,eAAiBJ,EAAOI,cAAcF,SAC9D,GAAkB,SAAdD,GAAuC,UAAdA,GAAwC,KAAdA,GACrC,SAAdE,GAAuC,UAAdA,GAAwC,KAAdA,IAClDE,EAAAA,WAAWC,SAASlC,EAAMQ,cAAcoB,OAAQ,eAFrD,CAMA,GAAIjM,KAAKwM,cAAe,CAEpB,GADAxM,KAAKsJ,mCAAoC,EACrCtJ,KAAKyM,2BAA6BpC,EAAMQ,cAAc6B,UAAmC,MAAvB1M,KAAKyK,eACvE6B,EAAAA,WAAWK,iBACe,MAAtB3M,KAAK4M,eACL5M,KAAK6M,oBAAoBxC,EAAMQ,eAGnC7K,KAAK4M,cAAgBvC,EAAMyC,SAC3B9M,KAAK+M,YAAY1C,EAAMQ,cAAeR,EAAMyC,cAE3C,CACD,IAAIE,EAAU3C,EAAM2C,QAChBC,EAAWjN,KAAKkN,WAAWF,GAC3BG,GAAgBnN,KAAKoN,YAAqBpN,KAAKqN,iBAC/CC,EAAetN,KAAK4J,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,UAAY,KAIhG,GAHA5J,KAAKyK,eAAiBJ,EAAMyC,SAC5B9M,KAAK4M,cAAgBvC,EAAMyC,SAEvBK,EAAe,CACf,IAAIpC,EAAUV,EAAMQ,cAAcE,SAASV,EAAMQ,cAAcG,QAE/D,GAAIiC,GAAYlC,EAAS,CACrB,GAAI/K,KAAKuN,wBACLvN,KAAKqJ,WAAa,KAClBrJ,KAAK6F,cAAgB,GACrB7F,KAAK6C,gBAAgBoD,KAAK,UAEzB,CACD,IAAIuH,EAAiBxN,KAAKyN,qBAAqBT,GAC/ChN,KAAKqJ,WAAarJ,KAAKoJ,UAAUsE,QAAO,SAACjE,EAAI3K,GAAM,OAAAA,GAAG0O,KACtDxN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC3BkE,UACOtN,KAAK6F,cAAcyH,GAIlCtN,KAAKuE,cAAc0B,KAAK,CAAC4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAASW,KAAM,aAG9E3N,KAAKuN,yBACLvN,KAAKqJ,WAAa2D,EAClBhN,KAAK6C,gBAAgBoD,KAAK+G,GACtBM,IACAtN,KAAK6F,cAAgB,GACrB7F,KAAK6F,cAAcyH,GAAgB,IAGlCtN,KAAKyM,4BACN1B,EACA/K,KAAKqJ,WAAarJ,KAAKoJ,WAAW,IAGlCpJ,KAAKqJ,WAAa,GAClBrJ,KAAK6F,cAAgB,IAGzB7F,KAAKqJ,WAAUzJ,EAAOI,KAAKoJ,UAAS,CAAC4D,IACrChN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC3BkE,IACAtN,KAAK6F,cAAcyH,GAAgB,IAI3CtN,KAAKsE,YAAY2B,KAAK,CAAC4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAASW,KAAM,MAAOzK,MAAOmH,EAAMyC,gBAIxG,GAA2B,WAAvB9M,KAAKwM,cACDS,GACAjN,KAAKqJ,WAAa,KAClBrJ,KAAK6F,cAAgB,GACrB7F,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKuE,cAAc0B,KAAK,CAAE4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAASW,KAAM,MAAOzK,MAAOmH,EAAMyC,aAGvG9M,KAAKqJ,WAAa2D,EAClBhN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKsE,YAAY2B,KAAK,CAAE4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAASW,KAAM,MAAOzK,MAAOmH,EAAMyC,WACjGQ,IACAtN,KAAK6F,cAAgB,GACrB7F,KAAK6F,cAAcyH,GAAgB,SAI1C,GAA2B,aAAvBtN,KAAKwM,cACV,GAAIS,EAAU,CACV,IAAIW,EAAiB5N,KAAKyN,qBAAqBT,GAC/ChN,KAAKqJ,WAAarJ,KAAKoJ,UAAUsE,QAAO,SAACjE,EAAK3K,GAAM,OAAAA,GAAK8O,KACzD5N,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKuE,cAAc0B,KAAK,CAAE4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAASW,KAAM,MAAOzK,MAAOmH,EAAMyC,WACnGQ,UACOtN,KAAK6F,cAAcyH,QAI9BtN,KAAKqJ,WAAarJ,KAAKoJ,UAASxJ,EAAOI,KAAKoJ,UAAS,CAAE4D,IAAW,CAACA,GACnEhN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKsE,YAAY2B,KAAK,CAAE4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAASW,KAAM,MAAOzK,MAAOmH,EAAMyC,WACjGQ,IACAtN,KAAK6F,cAAcyH,GAAgB,GAOvDtN,KAAKgC,aAAaZ,oBAEdpB,KAAK8H,cACL9H,KAAKwK,YAIbxK,KAAKoN,YAAa,IAGtBvL,EAAAZ,UAAA4M,kBAAA,SAAkBxD,GACdrK,KAAKoN,YAAa,GAGtBvL,EAAAZ,UAAA6M,oBAAA,SAAoBzD,GAChB,GAAIrK,KAAK+N,YAAa,CAClB,IAAMf,EAAU3C,EAAM2C,QAEtB,GAAsC,aAAlChN,KAAKgD,yBACLhD,KAAKgO,qBAAuBhB,EAC5BhN,KAAK+C,2BAA2BkD,KAAK+G,GACrChN,KAAK6E,oBAAoBoB,KAAK,CAAC4E,cAAeR,EAAMQ,cAAetJ,KAAMyL,EAAS9J,MAAOmH,EAAMyC,WAC/F9M,KAAK+N,YAAYE,KAAK5D,EAAMQ,eAC5B7K,KAAKgC,aAAaV,cAAc0L,QAE/B,GAAsC,UAAlChN,KAAKgD,yBAAsC,CAChDhD,KAAKsJ,mCAAoC,EACzC,IAAI2D,EAAWjN,KAAKkN,WAAWF,GAC3BM,EAAetN,KAAK4J,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,UAAY,KAE3FqD,IACGjN,KAAKuN,yBACLvN,KAAKoJ,UAAY4D,EACjBhN,KAAK6C,gBAAgBoD,KAAK+G,GAEtBM,IACAtN,KAAK6F,cAAgB,GACrB7F,KAAK6F,cAAcyH,GAAgB,IAGlCtN,KAAKyM,4BACVzM,KAAKqJ,WAAarJ,KAAKoJ,UAASxJ,EAAOI,KAAKoJ,UAAS,CAAE4D,IAAW,CAACA,GACnEhN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAE3BkE,IACAtN,KAAK6F,cAAcyH,GAAgB,KAK/CtN,KAAKgC,aAAaZ,oBAClBpB,KAAK+N,YAAYE,KAAK5D,EAAMQ,eAC5B7K,KAAK6E,oBAAoBoB,KAAK,CAAC4E,cAAeR,EAAO9I,KAAMyL,EAAS9J,MAAOmH,EAAMyC,cAK7FjL,EAAAZ,UAAA8L,YAAA,SAAY1C,EAAmByC,GAC3B,IAAIoB,EAAYC,EAEZnO,KAAKyK,eAAiBqC,GACtBoB,EAAapB,EACbqB,EAAWnO,KAAKyK,gBAEXzK,KAAKyK,eAAiBqC,GAC3BoB,EAAalO,KAAKyK,eAClB0D,EAAWrB,IAGXoB,EAAapB,EACbqB,EAAWrB,GAGX9M,KAAKoD,MAAQpD,KAAKoO,YAClBF,GAAclO,KAAKsK,MACnB6D,GAAYnO,KAAKsK,OAIrB,IADA,IAAI+D,EAAgB,GACZvP,EAAIoP,EAAYpP,GAAKqP,EAAUrP,IAAK,CACxC,IAAIwP,EAAetO,KAAKuO,cAAgBvO,KAAKuO,cAAczP,GAAKkB,KAAKd,MAAMJ,GAC3E,IAAKkB,KAAKkN,WAAWoB,GAAe,CAChCD,EAAc3O,KAAK4O,GACnBtO,KAAKqJ,WAAUzJ,EAAOI,KAAKoJ,UAAS,CAAEkF,IACtC,IAAIhB,EAAuBtN,KAAK4J,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBmE,EAActO,KAAK4J,UAAY,KACzG0D,IACAtN,KAAK6F,cAAcyH,GAAgB,IAI/CtN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKsE,YAAY2B,KAAK,CAAC4E,cAAeR,EAAO9I,KAAM8M,EAAeV,KAAM,SAG5E9L,EAAAZ,UAAA4L,oBAAA,SAAoBxC,GAChB,IAAI6D,EAAYC,EAEZnO,KAAK4M,cAAgB5M,KAAKyK,gBAC1ByD,EAAalO,KAAKyK,eAClB0D,EAAWnO,KAAK4M,eAEX5M,KAAK4M,cAAgB5M,KAAKyK,gBAC/ByD,EAAalO,KAAK4M,cAClBuB,EAAWnO,KAAKyK,iBAGhByD,EAAalO,KAAK4M,cAClBuB,EAAWnO,KAAK4M,eAGpB,mBAAQ9N,GACJ,IAAIwP,EAAeE,EAAKtP,MAAMJ,GAC1B2P,EAAiBD,EAAKf,qBAAqBa,GAC/CE,EAAKnF,WAAamF,EAAKpF,UAAUsE,QAAO,SAACjE,EAAI3K,GAAM,OAAAA,GAAG2P,KACtD,IAAInB,EAAuBkB,EAAK5E,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBmE,EAAcE,EAAK5E,UAAY,KACzG0D,UACOkB,EAAK3I,cAAcyH,GAE9BkB,EAAKjK,cAAc0B,KAAK,CAAC4E,cAAeR,EAAO9I,KAAM+M,EAAcX,KAAM,gBARrE7O,EAAIoP,EAAYpP,GAAKqP,EAAUrP,MAA/BA,IAYZ+C,EAAAZ,UAAAiM,WAAA,SAAWF,GACP,SAAIA,IAAWhN,KAAKoJ,aACZpJ,KAAK4J,aAC8E8E,IAA5E1O,KAAK6F,cAAcqE,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,UAGjE5J,KAAKoJ,qBAAqBS,MACnB7J,KAAKyN,qBAAqBT,IAAY,EAEtChN,KAAK2O,OAAO3B,EAAShN,KAAKoJ,aAOjDvH,EAAAZ,UAAAwM,qBAAA,SAAqBT,GACjB,IAAI9J,GAAiB,EACrB,GAAIlD,KAAKoJ,WAAapJ,KAAKoJ,UAAUpK,OACjC,IAAK,IAAIF,EAAI,EAAGA,EAAIkB,KAAKoJ,UAAUpK,OAAQF,IACvC,GAAIkB,KAAK2O,OAAO3B,EAAShN,KAAKoJ,UAAUtK,IAAK,CACzCoE,EAAQpE,EACR,MAKZ,OAAOoE,GAGXrB,EAAAZ,UAAA2N,mBAAA,SAAmBvE,EAAY2C,GAC3BhN,KAAKsJ,mCAAoC,EAErCtJ,KAAKoJ,WAAa4D,GAClBhN,KAAKqJ,WAAa2D,EAClBhN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKsE,YAAY2B,KAAK,CAAC4E,cAAeR,EAAMQ,cAAe3H,MAAOmH,EAAMyC,SAAUvL,KAAMyL,EAASW,KAAM,gBAEnG3N,KAAK4J,UACL5J,KAAK6F,cAAgB,GACrB7F,KAAK6F,cAAcoE,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,WAAa,KAItF5J,KAAKqJ,WAAa,KAClBrJ,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKuE,cAAc0B,KAAK,CAAC4E,cAAeR,EAAMQ,cAAe3H,MAAOmH,EAAMyC,SAAUvL,KAAMyL,EAASW,KAAM,iBAG7G3N,KAAKgC,aAAaZ,oBAEdpB,KAAK8H,cACL9H,KAAKwK,aAIb3I,EAAAZ,UAAA4N,sBAAA,SAAsBxE,EAAO2C,GACzBhN,KAAKoJ,UAAYpJ,KAAKoJ,WAAW,GACjC,IAAI6D,EAAWjN,KAAKkN,WAAWF,GAC3BM,EAAetN,KAAK4J,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,UAAY,KAGhG,GAFA5J,KAAKsJ,mCAAoC,EAErC2D,EAAU,CACV,IAAI6B,EAAiB9O,KAAKyN,qBAAqBT,GAC/ChN,KAAKqJ,WAAarJ,KAAKoJ,UAAUsE,QAAO,SAACjE,EAAK3K,GAAM,OAAAA,GAAKgQ,KACzD9O,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKuE,cAAc0B,KAAK,CAAE4E,cAAeR,EAAMQ,cAAe3H,MAAOmH,EAAMyC,SAAUvL,KAAMyL,EAASW,KAAM,aACtGL,UACOtN,KAAK6F,cAAcyH,QAI9BtN,KAAKqJ,WAAarJ,KAAKoJ,UAASxJ,EAAOI,KAAKoJ,UAAS,CAAE4D,IAAW,CAACA,GACnEhN,KAAK6C,gBAAgBoD,KAAKjG,KAAKoJ,WAC/BpJ,KAAKsE,YAAY2B,KAAK,CAAE4E,cAAeR,EAAMQ,cAAe3H,MAAOmH,EAAMyC,SAAUvL,KAAMyL,EAASW,KAAM,aACpGL,IACAtN,KAAK6F,cAAcyH,GAAgB,GAI3CtN,KAAKgC,aAAaZ,oBAEdpB,KAAK8H,cACL9H,KAAKwK,aAIb3I,EAAAZ,UAAA8N,uBAAA,SAAuB1E,EAAc2E,GACjChP,KAAKqJ,WAAa2F,EAAQhP,KAAKuO,cAAgBvO,KAAKuO,cAAcU,QAASjP,KAAKd,MAAM+P,QAAU,GAChGjP,KAAKsJ,mCAAoC,EACzCtJ,KAAKuJ,sBACLvJ,KAAK6C,gBAAgBoD,KAAKjG,KAAKqJ,YAC/BrJ,KAAKgC,aAAaZ,oBAClBpB,KAAKoF,uBAAuBa,KAAK,CAAC4E,cAAeR,EAAO6E,QAASF,IAE7DhP,KAAK8H,cACL9H,KAAKwK,aAIb3I,EAAAZ,UAAA0N,OAAA,SAAOrD,EAAOC,GACV,MAAmC,WAA5BvL,KAAKsD,mBAAmCgI,IAAUC,EAASrB,EAAAA,YAAYyE,OAAOrD,EAAOC,EAAOvL,KAAK4J,UAI5G/H,EAAAZ,UAAAyM,OAAA,SAAOxO,EAAY4L,EAAeqE,GAAlC,IAAA7I,EAAAtG,KACQA,KAAKoP,eACLC,aAAarP,KAAKoP,eAEjBpP,KAAKsP,cAAcpQ,GAEbc,KAAKyD,QAAQqH,WACb9K,KAAKyD,QAAQqH,GAFpB9K,KAAKyD,QAAQqH,GAAS,CAAE5L,MAAOA,EAAOiQ,UAAWA,GAKrDnP,KAAKoP,cAAgBG,YAAW,WAC5BjJ,EAAKsC,UACLtC,EAAK8I,cAAgB,OACtBpP,KAAK0D,aAER1D,KAAKyK,eAAiB,MAG1B5I,EAAAZ,UAAAuO,aAAA,SAAatQ,EAAOiQ,GAChBnP,KAAK0N,OAAOxO,EAAO,SAAUiQ,IAGjCtN,EAAAZ,UAAAqO,cAAA,SAAc5B,GACV,OAAIA,MAAAA,IACuB,iBAAXA,GAA+C,GAAxBA,EAAO+B,OAAOzQ,QAAiB0O,aAAkB7D,OAA0B,GAAjB6D,EAAO1O,SAQ5G6C,EAAAZ,UAAA2H,QAAA,mBAMI,GALK5I,KAAKmG,kBACNnG,KAAKsK,MAAQ,EACbtK,KAAKsF,YAAYW,KAAKjG,KAAKsK,QAG3BtK,KAAKoD,KACLpD,KAAK0E,WAAWuB,KAAKjG,KAAKkG,8BAEzB,CACD,IAAKlG,KAAKd,MACN,OAGJ,GAAKc,KAAK2I,YAML,CACD,IAAI+G,OAAuB,EAC3B,GAAI1P,KAAKyD,QAAgB,OAAG,CACxB,IAAKzD,KAAK2B,UAAY3B,KAAK2P,mBACvB,MAAM,IAAIC,MAAM,kFAEhBF,EAA0B1P,KAAK2P,oBAAoB3P,KAAK2B,QAGhE3B,KAAKuO,cAAgB,GAErB,IAAK,IAAIzP,EAAI,EAAGA,EAAIkB,KAAKd,MAAMF,OAAQF,IAAK,CACxC,IAAI+Q,GAAa,EACbC,GAAc,EACdC,GAAgB,EAEpB,IAAK,IAAIC,KAAQhQ,KAAKyD,QAClB,GAAIzD,KAAKyD,QAAQwM,eAAeD,IAAkB,WAATA,EAAmB,CACxDD,GAAgB,EAChB,IAAIG,EAAcF,EACdG,EAAanQ,KAAKyD,QAAQyM,GAE9B,GAAIrG,MAAMC,QAAQqG,OACd,IAAiB,IAAAC,GAAAC,OAAA,EAAA7R,EAAA2R,IAAUG,EAAAF,EAAAnR,QAAAqR,EAAAnR,KAAAmR,EAAAF,EAAAnR,OAAE,CAAxB,IAAIsR,EAAID,EAAApR,MAGT,GAFA2Q,EAAa7P,KAAKwQ,mBAAmBN,EAAalQ,KAAKd,MAAMJ,GAAIyR,GAE5DA,EAAKE,WAAaC,EAAAA,eAAeC,IAAMd,GAAgBU,EAAKE,WAAaC,EAAAA,eAAeE,MAAQf,EACjG,6GAKRA,EAAa7P,KAAKwQ,mBAAmBN,EAAalQ,KAAKd,MAAMJ,GAAIqR,GAGrE,IAAKN,EACD,MAKZ,GAAI7P,KAAKyD,QAAgB,SAAMqM,GAAeJ,EAC1C,IAAI,IAAImB,EAAI,EAAGA,EAAInB,EAAwB1Q,OAAQ6R,IAAK,CACpD,IAAIC,EAAoBpB,EAAwBmB,GAAG/F,OAAO4E,EAAwBmB,GAGlF,GAFAf,EAAc9P,KAAKkC,cAAcuB,QAA0BzD,KAAKyD,QAAgB,OAAG0L,WAAWjF,EAAAA,YAAYC,iBAAiBnK,KAAKd,MAAMJ,GAAIgS,GAAsC9Q,KAAKyD,QAAgB,OAAGvE,MAAOc,KAAK+Q,cAGhN,OAMR/Q,KAAKyD,QAAgB,OACXsM,EAAiBA,GAAiBF,GAAcC,EAAeA,EAG/DC,GAAiBF,IAI3B7P,KAAKuO,cAAc7O,KAAKM,KAAKd,MAAMJ,IAIvCkB,KAAKuO,cAAcvP,SAAWgB,KAAKd,MAAMF,SACzCgB,KAAKuO,cAAgB,MAGrBvO,KAAKoO,YACLpO,KAAKsI,aAAetI,KAAKuO,cAAgBvO,KAAKuO,cAAcvP,OAASgB,KAAKd,MAAQc,KAAKd,MAAMF,OAAS,QA3E1GgB,KAAKuO,cAAgB,KACjBvO,KAAKoO,YACLpO,KAAKsI,aAAetI,KAAKd,MAAQc,KAAKd,MAAMF,OAAS,GA8EjEgB,KAAKyE,SAASwB,KAAK,CACfxC,QAASzD,KAAKyD,QACd8K,cAAevO,KAAKuO,eAAiBvO,KAAKd,QAG9Cc,KAAKgC,aAAaR,cAAcxB,KAAKd,OAEjCc,KAAK8H,eAAiB9H,KAAKmG,iBAC3BnG,KAAKwK,YAGLxK,KAAKmG,kBACLnG,KAAKmG,iBAAkB,GAG3BnG,KAAKiC,GAAG+O,eAEJhR,KAAK0K,YACL1K,KAAK2K,kBAIb9I,EAAAZ,UAAAuP,mBAAA,SAAmB1F,EAAekC,EAAcmD,GAC5C,IAAIc,EAAcd,EAAWjR,MACzBgS,EAAkBf,EAAWhB,WAAagC,EAAAA,gBAAgBC,YAC1DC,EAAiBnH,EAAAA,YAAYC,iBAAiB6C,EAASlC,GAG3D,OAAOwG,EAFgBtR,KAAKkC,cAAcuB,QAAQyN,IAE1BG,EAAgBJ,EAAajR,KAAK+Q,eAG9DlP,EAAAZ,UAAA0H,UAAA,WACI,IAAI4I,GAAQ,EACZ,IAAK,IAAIvB,KAAQhQ,KAAKyD,QAClB,GAAIzD,KAAKyD,QAAQwM,eAAeD,GAAO,CACnCuB,GAAQ,EACR,MAIR,OAAQA,GAGZ1P,EAAAZ,UAAAiF,uBAAA,WACI,MAAO,CACHoE,MAAOtK,KAAKsK,MACZC,KAAMvK,KAAKuK,KACXhC,UAAWvI,KAAKuI,UAChBW,UAAWlJ,KAAKkJ,UAChBzF,QAASzD,KAAKyD,QACd+N,aAAcxR,KAAKyD,SAAWzD,KAAKyD,QAAgB,OAAsBzD,KAAKyD,QAAgB,OAAGvE,MAAQ,KACzGuJ,cAAezI,KAAKyI,gBAIrB5G,EAAAZ,UAAAwQ,MAAA,WACHzR,KAAKiJ,WAAa,KAClBjJ,KAAK8F,WAAa9F,KAAK0C,iBACvB1C,KAAKmJ,eAAiB,KACtBnJ,KAAKgC,aAAad,OAAO,MAErBlB,KAAKyD,QAAgB,SACHzD,KAAKyD,QAAgB,OAAGvE,MAAQ,MAGtDc,KAAKuO,cAAgB,KACrBvO,KAAKgC,aAAaX,gBAElBrB,KAAKsK,MAAQ,EACbtK,KAAKsF,YAAYW,KAAKjG,KAAKsK,OAEvBtK,KAAKoD,KACLpD,KAAK0E,WAAWuB,KAAKjG,KAAKkG,0BAG1BlG,KAAKsI,aAAgBtI,KAAK0F,OAAS1F,KAAK0F,OAAO1G,OAAS,GAIzD6C,EAAAZ,UAAAyQ,MAAA,WACH1R,KAAKyR,SAGF5P,EAAAZ,UAAA0Q,UAAA,SAAUC,GAAV,IACCrQ,EADD+E,EAAAtG,KAEC6R,EAAM,GACNlQ,EAAU3B,KAAK8R,cAAalS,EAAOI,KAAK8R,cAAkB9R,KAAK2B,SAAW3B,KAAK2B,QAE/EiQ,GAAWA,EAAQG,cACnBxQ,EAAOvB,KAAKoJ,WAAa,IAGzB7H,EAAOvB,KAAKuO,eAAiBvO,KAAKd,MAE9Bc,KAAKgS,cACLzQ,EAAOA,EAAI3B,EAAOI,KAAKgS,YAAgBzQ,GAAQvB,KAAKgS,cAK5D,IAAK,IAAIlT,EAAI,EAAGA,EAAI6C,EAAQ3C,OAAQF,IAAK,CACrC,IAAImT,EAAStQ,EAAQ7C,IACK,IAAtBmT,EAAOC,YAAwBD,EAAOnH,QACtC+G,GAAO,KAAOI,EAAOE,QAAUF,EAAOnH,OAAS,IAE3ChM,EAAK6C,EAAQ3C,OAAS,IACtB6S,GAAO7R,KAAKuD,eAMxBhC,EAAKiF,SAAQ,SAAC4L,EAAQtT,GAClB+S,GAAO,KACP,IAAK,IAAIQ,EAAI,EAAGA,EAAI1Q,EAAQ3C,OAAQqT,IAAK,CACrC,IAAIJ,EAAStQ,EAAQ0Q,GACrB,IAA0B,IAAtBJ,EAAOC,YAAwBD,EAAOnH,MAAO,CAC7C,IAAIwH,EAAWpI,EAAAA,YAAYC,iBAAiBiI,EAAQH,EAAOnH,OAInDwH,EAFQ,MAAZA,EACIhM,EAAKiM,eACMjM,EAAKiM,eAAe,CAC3BhR,KAAM+Q,EACNxH,MAAOmH,EAAOnH,QAIPb,OAAOqI,GAAUE,QAAQ,KAAM,MAGnC,GAEfX,GAAO,IAAMS,EAAW,IAEpBD,EAAK1Q,EAAQ3C,OAAS,IACtB6S,GAAOvL,EAAK/C,mBAM5B,IAAIkP,EAAO,IAAIC,KAAK,CAACb,GAAM,CACvBlE,KAAM,4BAGV,GAAIgF,OAAOC,UAAUC,iBACjBD,UAAUC,iBAAiBJ,EAAMzS,KAAKwD,eAAiB,YAEtD,CACD,IAAIsP,EAAOC,SAASC,cAAc,KAClCF,EAAKG,MAAMC,QAAU,OACrBH,SAASI,KAAKC,YAAYN,QACJpE,IAAlBoE,EAAKO,UACLP,EAAKQ,aAAa,OAAQC,IAAIC,gBAAgBf,IAC9CK,EAAKQ,aAAa,WAAYtT,KAAKwD,eAAiB,QACpDsP,EAAKW,UAGL5B,EAAM,+BAAiCA,EACvCc,OAAOe,KAAKC,UAAU9B,KAE1BkB,SAASI,KAAKS,YAAYd,KAI3BjR,EAAAZ,UAAA0J,eAAA,WACC3K,KAAKgG,cACLhG,KAAK6T,qBAAqB,GAE1B7T,KAAK8T,SAAS,CAACC,IAAK,KAGrBlS,EAAAZ,UAAA4S,qBAAA,SAAqB3Q,GACpBlD,KAAKgU,qBACLhU,KAAKgU,oBAAoBH,qBAAqB3Q,GAG9ClD,KAAKiU,2BACLjU,KAAKiU,0BAA0BJ,qBAAqB3Q,IAIrDrB,EAAAZ,UAAA6S,SAAA,SAASlC,GACR5R,KAAKgU,qBACLhU,KAAKgU,oBAAoBF,SAASlC,GAGlC5R,KAAKiU,2BACLjU,KAAKiU,0BAA0BH,SAASlC,IAIhD/P,EAAAZ,UAAAiT,kBAAA,SAAkBC,EAAM5S,EAAMuJ,EAAO5H,GACjClD,KAAKoU,YAAcD,EACnBnU,KAAKqU,gBAAkB9S,EACvBvB,KAAKsU,iBAAmBxJ,EACxB9K,KAAKuU,oBAAsBrR,EAC3BlD,KAAKwU,4BAGT3S,EAAAZ,UAAAwT,mBAAA,WACI,OAAQzU,KAAKoU,aAAoF,IAArE9H,EAAAA,WAAWoI,KAAK1U,KAAKoU,YAAa,wBAAwBpV,QAG1F6C,EAAAZ,UAAAuT,yBAAA,WAAA,IAAAlO,EAAAtG,KACSA,KAAK2U,uBACN3U,KAAK2U,qBAAuB,SAACtK,GACrB/D,EAAK8N,cAAgB9N,EAAKsO,kBAAoBtO,EAAKmO,uBACnDnI,EAAAA,WAAWuI,YAAYvO,EAAK8N,YAAa,kBACzC9N,EAAK8N,YAAc,KACnB9N,EAAKpB,eAAee,KAAK,CAAE6E,MAAOxE,EAAKgO,iBAAkB/S,KAAM+E,EAAK+N,gBAAiBxJ,cAAeR,EAAOnH,MAAOoD,EAAKiO,sBACvHjO,EAAKgO,iBAAmB,KACxBhO,EAAK+N,gBAAkB,KACvB/N,EAAKiO,oBAAsB,KAC3BjO,EAAKwO,6BACLxO,EAAKrE,GAAG+O,gBAGZ1K,EAAKsO,kBAAmB,GAG5B7B,SAASgC,iBAAiB,QAAS/U,KAAK2U,wBAIhD9S,EAAAZ,UAAA6T,2BAAA,WACQ9U,KAAK2U,uBACL5B,SAASiC,oBAAoB,QAAShV,KAAK2U,sBAC3C3U,KAAK2U,qBAAuB,OAIpC9S,EAAAZ,UAAAgU,YAAA,SAAYjI,GACR,IAAIM,EAAerD,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,UACrE5J,KAAK4D,eAAe0J,IAAgB,GAGxCzL,EAAAZ,UAAAiU,YAAA,SAAYlI,EAAcmI,GACtB,GAAmE,IAA/D7I,EAAAA,WAAWoI,KAAKS,EAAY,wBAAwBnW,OAAc,CAClE,IAAIsO,EAAerD,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,iBAC9D5J,KAAK4D,eAAe0J,KAInCzL,EAAAZ,UAAAmU,cAAA,SAAcpI,GACV,IAAIM,EAAerD,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,iBAC9D5J,KAAK4D,eAAe0J,IAG/BzL,EAAAZ,UAAAoU,UAAA,SAAUrI,EAAc3C,GACpB,IAAKrK,KAAK4J,QACN,MAAM,IAAIgG,MAAM,gDAGpB,IAAItC,EAAerD,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,UAE3B,MAAtC5J,KAAK2D,gBAAgB2J,WACdtN,KAAK2D,gBAAgB2J,GAC5BtN,KAAK4E,cAAcqB,KAAK,CACpB4E,cAAeR,EACf9I,KAAMyL,MAIiB,WAAvBhN,KAAK6D,gBACL7D,KAAK2D,gBAAkB,IAG3B3D,KAAK2D,gBAAgB2J,IAAgB,EACrCtN,KAAK2E,YAAYsB,KAAK,CAClB4E,cAAeR,EACf9I,KAAMyL,KAIV3C,GACAA,EAAMiL,iBAGNtV,KAAK8H,cACL9H,KAAKwK,aAIb3I,EAAAZ,UAAAsU,cAAA,SAAcvI,GACV,OAA6F,IAAtFhN,KAAK2D,gBAAgBsG,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,YAGlF/H,EAAAZ,UAAAuU,aAAA,SAAaxI,GACT,OAA4F,IAArFhN,KAAK4D,eAAeqG,OAAOC,EAAAA,YAAYC,iBAAiB6C,EAAShN,KAAK4J,YAGjF/H,EAAAZ,UAAAsM,sBAAA,WACI,MAA8B,WAAvBvN,KAAKwM,eAGhB3K,EAAAZ,UAAAwL,wBAAA,WACI,MAA8B,aAAvBzM,KAAKwM,eAGhB3K,EAAAZ,UAAAwU,oBAAA,SAAoBpL,GAChB,IAAIqL,EAAgBpJ,EAAAA,WAAWqJ,UAAU3V,KAAK4V,mBAAmBC,eAAeC,KAChF9V,KAAK+V,mBAAsB1L,EAAM2L,MAAQN,EAAgB1V,KAAK4V,mBAAmBC,cAAcI,WAC/FjW,KAAKkW,eAAe7L,GACpBA,EAAMiL,kBAGVzT,EAAAZ,UAAAiV,eAAA,SAAe7L,GACX,IAAIqL,EAAgBpJ,EAAAA,WAAWqJ,UAAU3V,KAAK4V,mBAAmBC,eAAeC,KAChFxJ,EAAAA,WAAW6J,SAASnW,KAAK4V,mBAAmBC,cAAe,uBAC3D7V,KAAKoW,sBAAsBP,cAAc5C,MAAMoD,OAASrW,KAAK4V,mBAAmBC,cAAcS,aAAe,KAC7GtW,KAAKoW,sBAAsBP,cAAc5C,MAAMc,IAAM,MACrD/T,KAAKoW,sBAAsBP,cAAc5C,MAAM6C,KAAQzL,EAAM2L,MAAQN,EAAgB1V,KAAK4V,mBAAmBC,cAAcI,WAAc,KAEzIjW,KAAKoW,sBAAsBP,cAAc5C,MAAMC,QAAU,SAG7DrR,EAAAZ,UAAAsV,kBAAA,SAAkBlM,EAAO4H,GACrB,IAAIuE,EAAQxW,KAAKoW,sBAAsBP,cAAcY,WAAazW,KAAK+V,mBACnEW,EAAczE,EAAO0E,YACrBC,EAAWC,SAAS5E,EAAOgB,MAAM2D,UAAY,IAE7CF,EAAcF,EAAQI,IACtBJ,EAAQI,EAAWF,GAGvB,IAAMI,EAAiBJ,EAAcF,EAErC,GAAIM,GAAkBF,EAAU,CAC5B,GAA8B,QAA1B5W,KAAKgE,iBAA4B,CAEjC,IADA,IAAI+S,EAAa9E,EAAO+E,oBAChBD,EAAWE,cACfF,EAAaA,EAAWC,mBAG5B,GAAID,EAAY,CACZ,IAAIG,EAAkBH,EAAWJ,YAAcH,EAC3CW,EAAqBJ,EAAW9D,MAAM2D,UAAY,GAEtD,GAAIE,EAAiB,IAAMI,EAAkBL,SAASM,GAClD,GAAInX,KAAK0K,WAAY,CACjB,IAAI0M,EAAiBpX,KAAKqX,yBAAyBpF,GAC/CqF,EAAsBhL,EAAAA,WAAWiL,WAAWH,EAAgB,uCAAyC9K,EAAAA,WAAWiL,WAAWH,EAAgB,8CAC3II,EAAwBlL,EAAAA,WAAWiL,WAAWH,EAAgB,6CAC9DK,EAAwBnL,EAAAA,WAAWiL,WAAWH,EAAgB,6CAC9DM,EAAoBpL,EAAAA,WAAWpJ,MAAM+O,GAEzCjS,KAAK2X,eAAeH,EAAuBE,EAAmBZ,EAAgBI,GAC9ElX,KAAK2X,eAAeL,EAAqBI,EAAmBZ,EAAgBI,GAC5ElX,KAAK2X,eAAeF,EAAuBC,EAAmBZ,EAAgBI,QAG9EjF,EAAOgB,MAAM2E,MAAQd,EAAiB,KAClCC,IACAA,EAAW9D,MAAM2E,MAAQV,EAAkB,YAM1D,GAA8B,WAA1BlX,KAAKgE,kBACN8S,GAAkBF,EAClB,GAAI5W,KAAK0K,WACL1K,KAAK6X,sCAAsC5F,EAAQ6E,EAAgBN,OAElE,CACDxW,KAAK8X,eAAejC,cAAc5C,MAAM2E,MAAQ5X,KAAK8X,eAAejC,cAAcc,YAAcH,EAAQ,KACxGvE,EAAOgB,MAAM2E,MAAQd,EAAiB,KACtC,IAAIiB,EAAiB/X,KAAK8X,eAAejC,cAAc5C,MAAM2E,MAC7D5X,KAAK4V,mBAAmBC,cAAc5C,MAAM2E,MAAQG,EAAiB,KAKjF/X,KAAK8E,YAAYmB,KAAK,CAClB+R,QAAS/F,EACTuE,MAAOA,IAGPxW,KAAK8H,cACL9H,KAAKwK,YAIbxK,KAAKoW,sBAAsBP,cAAc5C,MAAMC,QAAU,OACzD5G,EAAAA,WAAWuI,YAAY7U,KAAK4V,mBAAmBC,cAAe,wBAGlEhU,EAAAZ,UAAA4W,sCAAA,SAAsC5F,EAAQ6E,EAAgBN,GAC1D,IAAIY,EAAiBnF,EAASjS,KAAKqX,yBAAyBpF,GAAUjS,KAAK4V,mBAAmBC,cAC1FoC,EAAiB3L,EAAAA,WAAWiL,WAAWH,EAAgB,iCAAmC9K,EAAAA,WAAWiL,WAAWH,EAAgB,+BAChIc,EAAmB5L,EAAAA,WAAWiL,WAAWH,EAAgB,kCACzDe,EAAmB7L,EAAAA,WAAWiL,WAAWH,EAAgB,kCACzDE,EAAsBhL,EAAAA,WAAWiL,WAAWU,EAAgB,uCAAyC3L,EAAAA,WAAWiL,WAAWH,EAAgB,qCAC3II,EAAwBlL,EAAAA,WAAWiL,WAAWW,EAAkB,6CAChET,EAAwBnL,EAAAA,WAAWiL,WAAWY,EAAkB,6CAEhEC,EAAcpY,KAAKoY,YAAevB,SAAS7W,KAAKoY,YAAa,IAAM,EACjEC,EAA2BpG,EAASqF,EAAoBX,YAAcH,EAAQM,EAC9EwB,EAA6BrG,EAASuF,EAAsBb,YAAcH,EAAQM,EAClFyB,EAAwBvY,KAAK4V,mBAAmBC,cAAcc,YAAcyB,GAAeC,EAE7FG,EAAW,SAACC,EAAWC,EAAOd,EAAOW,GACjCE,GAAaC,IACbD,EAAUxF,MAAM2E,MAAQW,EAAwBX,EAAQtL,EAAAA,WAAWqM,wBAAwBV,GAAkB,KAAO,OACpHS,EAAMzF,MAAM2E,MAAQA,EAAQ,OAQpC,GAJAY,EAASP,EAAgBX,EAAqBe,EAA0BE,GACxEC,EAASN,EAAkBV,EAAuBc,EAA4BC,GAC9EC,EAASL,EAAkBV,EAAuBa,EAA4BC,GAE1EtG,EAAQ,CACR,IAAIyF,EAAoBpL,EAAAA,WAAWpJ,MAAM+O,GAEzCjS,KAAK2X,eAAeH,EAAuBE,EAAmBZ,EAAgB,MAC9E9W,KAAK2X,eAAeL,EAAqBI,EAAmBZ,EAAgB,MAC5E9W,KAAK2X,eAAeF,EAAuBC,EAAmBZ,EAAgB,QAItFjV,EAAAZ,UAAAoW,yBAAA,SAAyBpF,GACrB,GAAIA,EAAQ,CAER,IADA,IAAI2G,EAAS3G,EAAO5F,cACbuM,IAAWtM,EAAAA,WAAWC,SAASqM,EAAQ,gCAC1CA,EAASA,EAAOvM,cAGpB,OAAOuM,EAGP,OAAO,MAIf/W,EAAAZ,UAAA0W,eAAA,SAAee,EAAOhB,EAAmBZ,EAAgBI,GACrD,GAAIwB,EAAO,CACP,IAAIG,EAA0C,aAA/BH,EAAMI,SAAS,GAAG3M,SAA0BuM,EAAMI,SAAS,GAAK,KAE/E,IAAID,EAUA,KAAM,oEATN,IAAIE,EAAMF,EAASC,SAASpB,GACxBsB,EAAUD,EAAI/B,mBAClB+B,EAAI9F,MAAM2E,MAAQd,EAAiB,KAE/BkC,GAAW9B,IACX8B,EAAQ/F,MAAM2E,MAAQV,EAAkB,QASxDrV,EAAAZ,UAAAgY,kBAAA,SAAkB5O,EAAO6O,GACrBlZ,KAAKmZ,iBAAmB7M,EAAAA,WAAW8M,2BAA2BpZ,KAAKqZ,4BAA4BxD,eAC/F7V,KAAKsZ,kBAAoBhN,EAAAA,WAAWiN,4BAA4BvZ,KAAKwZ,8BAA8B3D,eACnG7V,KAAKyZ,cAAgBP,EACrB7O,EAAMqP,aAAaC,QAAQ,OAAQ,MAGvC9X,EAAAZ,UAAA2Y,kBAAA,SAAkBvP,EAAOwP,GACrB,GAAI7Z,KAAK8I,oBAAsB9I,KAAKyZ,eAAiBI,EAAY,CAC7DxP,EAAMiL,iBACN,IAAIwE,EAAkBxN,EAAAA,WAAWqJ,UAAU3V,KAAK4V,mBAAmBC,eAC/DkE,EAAmBzN,EAAAA,WAAWqJ,UAAUkE,GAE5C,GAAI7Z,KAAKyZ,eAAiBI,EAAY,CAClC,IAAIG,EAAY1N,EAAAA,WAAW2N,iBAAiBja,KAAKyZ,cAAe,sBAC5DS,EAAY5N,EAAAA,WAAW2N,iBAAiBJ,EAAY,sBACpDM,EAAaJ,EAAiBjE,KAAOgE,EAAgBhE,KAErDsE,GADYN,EAAgB/F,IAAMgG,EAAiBhG,IACpCgG,EAAiBjE,KAAO+D,EAAWlD,YAAc,GAEpE3W,KAAKqZ,4BAA4BxD,cAAc5C,MAAMc,IAAMgG,EAAiBhG,IAAM+F,EAAgB/F,KAAO/T,KAAKsZ,kBAAoB,GAAK,KACvItZ,KAAKwZ,8BAA8B3D,cAAc5C,MAAMc,IAAMgG,EAAiBhG,IAAM+F,EAAgB/F,IAAM8F,EAAWvD,aAAe,KAEhIjM,EAAM2L,MAAQoE,GACdpa,KAAKqZ,4BAA4BxD,cAAc5C,MAAM6C,KAAQqE,EAAaN,EAAWlD,YAAc0D,KAAKC,KAAKta,KAAKmZ,iBAAmB,GAAM,KAC3InZ,KAAKwZ,8BAA8B3D,cAAc5C,MAAM6C,KAAQqE,EAAaN,EAAWlD,YAAc0D,KAAKC,KAAKta,KAAKmZ,iBAAmB,GAAM,KAC7InZ,KAAKua,aAAe,IAGpBva,KAAKqZ,4BAA4BxD,cAAc5C,MAAM6C,KAAQqE,EAAaE,KAAKC,KAAKta,KAAKmZ,iBAAmB,GAAM,KAClHnZ,KAAKwZ,8BAA8B3D,cAAc5C,MAAM6C,KAAQqE,EAAaE,KAAKC,KAAKta,KAAKmZ,iBAAmB,GAAM,KACpHnZ,KAAKua,cAAgB,GAGpBL,EAAYF,GAAc,IAA4B,IAAvBha,KAAKua,cAAyBL,EAAYF,IAAe,GAA2B,IAAtBha,KAAKua,cACnGva,KAAKqZ,4BAA4BxD,cAAc5C,MAAMC,QAAU,OAC/DlT,KAAKwZ,8BAA8B3D,cAAc5C,MAAMC,QAAU,SAGjElT,KAAKqZ,4BAA4BxD,cAAc5C,MAAMC,QAAU,QAC/DlT,KAAKwZ,8BAA8B3D,cAAc5C,MAAMC,QAAU,cAIrE7I,EAAMqP,aAAac,WAAa,SAK5C3Y,EAAAZ,UAAAwZ,kBAAA,SAAkBpQ,GACVrK,KAAK8I,oBAAsB9I,KAAKyZ,gBAChCpP,EAAMiL,iBACNtV,KAAKqZ,4BAA4BxD,cAAc5C,MAAMC,QAAU,OAC/DlT,KAAKwZ,8BAA8B3D,cAAc5C,MAAMC,QAAU,SAIzErR,EAAAZ,UAAAyZ,aAAA,SAAarQ,EAAOsQ,GAApB,IAAArU,EAAAtG,KAEI,GADAqK,EAAMiL,iBACFtV,KAAKyZ,cAAe,CACpB,IAAIO,EAAY1N,EAAAA,WAAW2N,iBAAiBja,KAAKyZ,cAAe,sBAC5DS,EAAY5N,EAAAA,WAAW2N,iBAAiBU,EAAY,sBACpDC,EAAaZ,GAAaE,EAC1BU,IAAeV,EAAYF,GAAa,IAA4B,IAAvBha,KAAKua,cAAyBP,EAAYE,GAAa,GAA2B,IAAtBla,KAAKua,gBAC9GK,GAAY,GAGZA,GAAeV,EAAYF,GAAmC,IAAtBha,KAAKua,eAC7CL,GAAwB,GAGxBU,GAAeV,EAAYF,IAAoC,IAAvBha,KAAKua,eAC7CL,GAAwB,GAGxBU,IACA1Q,EAAAA,YAAY2Q,aAAa7a,KAAK2B,QAASqY,EAAWE,GAElDla,KAAK+E,aAAakB,KAAK,CACnB+T,UAAWA,EACXE,UAAWA,EACXvY,QAAS3B,KAAK2B,UAGd3B,KAAK8H,cACL9H,KAAK+B,KAAK+Y,mBAAkB,WACxBvL,YAAW,WACPjJ,EAAKkE,mBAMrBxK,KAAKqZ,4BAA4BxD,cAAc5C,MAAMC,QAAU,OAC/DlT,KAAKwZ,8BAA8B3D,cAAc5C,MAAMC,QAAU,OACjElT,KAAKyZ,cAAcsB,WAAY,EAC/B/a,KAAKyZ,cAAgB,KACrBzZ,KAAKua,aAAe,OAI5B1Y,EAAAZ,UAAA+Z,eAAA,SAAe3Q,EAAOnH,GAClBlD,KAAKib,aAAc,EACnBjb,KAAKkb,gBAAkBhY,EACvBmH,EAAMqP,aAAaC,QAAQ,OAAQ,MAGvC9X,EAAAZ,UAAAka,cAAA,SAAc9Q,EAAOnH,EAAOiS,GACxB,GAAInV,KAAKib,aAAejb,KAAKkb,kBAAoBhY,EAAO,CACpD,IAAIkY,EAAO9O,EAAAA,WAAWqJ,UAAUR,GAAYpB,IAAMzH,EAAAA,WAAW+O,qBACzDC,EAAQjR,EAAMiR,MACdC,EAAUH,EAAO9O,EAAAA,WAAWkP,eAAerG,GAAc,EACzDsG,EAAiBtG,EAAWuG,uBAE5BJ,EAAQC,GACRjP,EAAAA,WAAWuI,YAAYM,EAAY,gCAEnCnV,KAAK2b,gBAAkBzY,EACnBuY,EACAnP,EAAAA,WAAW6J,SAASsF,EAAgB,gCAEpCnP,EAAAA,WAAW6J,SAAShB,EAAY,+BAGhCsG,EACAnP,EAAAA,WAAWuI,YAAY4G,EAAgB,gCAEvCnP,EAAAA,WAAW6J,SAAShB,EAAY,6BAEpCnV,KAAK2b,gBAAkBzY,EAAQ,EAC/BoJ,EAAAA,WAAW6J,SAAShB,EAAY,mCAK5CtT,EAAAZ,UAAA2a,eAAA,SAAevR,EAAO8K,GAClB,IAAIsG,EAAiBtG,EAAWuG,uBAC5BD,GACAnP,EAAAA,WAAWuI,YAAY4G,EAAgB,gCAG3CnP,EAAAA,WAAWuI,YAAYM,EAAY,gCACnC7I,EAAAA,WAAWuI,YAAYM,EAAY,8BAGvCtT,EAAAZ,UAAA4a,aAAA,SAAaxR,GACTrK,KAAKib,aAAc,EACnBjb,KAAKkb,gBAAkB,KACvBlb,KAAK2b,gBAAkB,MAG3B9Z,EAAAZ,UAAA6a,UAAA,SAAUzR,EAAO8K,GACb,GAA4B,MAAxBnV,KAAK2b,gBAAyB,CAC9B,IAAIzB,EAAala,KAAKkb,gBAAkBlb,KAAK2b,gBAAmB3b,KAAK2b,gBAA4C,IAAzB3b,KAAK2b,gBAAyB,EAAI3b,KAAK2b,gBAAkB,EACjJzR,EAAAA,YAAY2Q,aAAa7a,KAAKd,MAAOc,KAAKkb,gBAAiBhB,GAE3Dla,KAAKgF,aAAaiB,KAAK,CACnB+T,UAAWha,KAAKkb,gBAChBhB,UAAWA,IAInBla,KAAK4b,eAAevR,EAAO8K,GAC3BnV,KAAK6b,aAAaxR,IAGtBxI,EAAAZ,UAAA8a,QAAA,WACI,IAAIxa,EAAOvB,KAAKuO,eAAevO,KAAKd,MACpC,OAAe,MAARqC,GAA+B,GAAfA,EAAKvC,QAGhC6C,EAAAZ,UAAA+a,oBAAA,WACI,OAAOhc,KAAK8B,GAAG+T,cAAciD,SAAS,IAG1CjX,EAAAZ,UAAAgb,WAAA,WACI,OAAOjc,KAAKoE,cACR,IAAK,QACD,OAAOuO,OAAOuJ,aAElB,IAAK,UACD,OAAOvJ,OAAOwJ,eAElB,QACI,MAAM,IAAIvM,MAAM5P,KAAKoE,aAAe,8FAIhDvC,EAAAZ,UAAA6G,WAAA,WACI,OAAwB,MAAjB9H,KAAKoc,UAGhBva,EAAAZ,UAAAuJ,UAAA,WACI,IAAM6R,EAAUrc,KAAKic,aACjBK,EAAoB,GAEpBtc,KAAKoO,YACLkO,EAAMhS,MAAQtK,KAAKsK,MACnBgS,EAAM/R,KAAOvK,KAAKuK,MAGlBvK,KAAKuI,YACL+T,EAAM/T,UAAYvI,KAAKuI,UACvB+T,EAAMpT,UAAYlJ,KAAKkJ,WAGvBlJ,KAAKyI,gBACL6T,EAAM7T,cAAgBzI,KAAKyI,eAG3BzI,KAAK2I,cACL2T,EAAM7Y,QAAUzD,KAAKyD,SAGrBzD,KAAK+H,kBACL/H,KAAKuc,iBAAiBD,GAGtBtc,KAAK8I,oBACL9I,KAAKwc,gBAAgBF,GAGrBtc,KAAKoJ,YACLkT,EAAMlT,UAAYpJ,KAAKoJ,WAGvB9K,OAAOme,KAAKzc,KAAK2D,iBAAiB3E,SAClCsd,EAAM3Y,gBAAkB3D,KAAK2D,iBAGjC0Y,EAAQK,QAAQ1c,KAAKoc,SAAUO,KAAKC,UAAUN,IAC9Ctc,KAAKwF,YAAYS,KAAKqW,IAG1Bza,EAAAZ,UAAA4b,WAAA,WACI,IAAMR,EAAUrc,KAAKic,aAEjBjc,KAAKoc,UACLC,EAAQS,WAAW9c,KAAKoc,WAIhCva,EAAAZ,UAAAmH,aAAA,WAAA,IAAA9B,EAAAtG,KAEU+c,EADU/c,KAAKic,aACOe,QAAQhd,KAAKoc,UACnCa,EAAa,6CASnB,GAAIF,EAAa,CACb,IAAIG,EAAoBP,KAAKQ,MAAMJ,GATvB,SAASK,EAAKle,GAC1B,MAAqB,iBAAVA,GAAsB+d,EAAWI,KAAKne,GACtC,IAAIoe,KAAKpe,GAGbA,KAMHc,KAAKoO,iBACcM,IAAf1O,KAAKsK,QACLtK,KAAKsK,MAAQ4S,EAAM5S,MACnBtK,KAAKsF,YAAYW,KAAKjG,KAAKsK,aAGboE,IAAd1O,KAAKuK,OACLvK,KAAKuK,KAAO2S,EAAM3S,KAClBvK,KAAKuF,WAAWU,KAAKjG,KAAKuK,QAI9B2S,EAAM3U,YACNvI,KAAKmL,eAAgB,EACrBnL,KAAKiJ,WAAaiU,EAAM3U,UACxBvI,KAAK8F,WAAaoX,EAAMhU,WAGxBgU,EAAMzU,gBACNzI,KAAKmL,eAAgB,EACrBnL,KAAKmJ,eAAiB+T,EAAMzU,eAG5ByU,EAAMzZ,UACNzD,KAAKmG,iBAAkB,EACvBnG,KAAKyD,QAAUyZ,EAAMzZ,SAGrBzD,KAAK+H,mBACL/H,KAAKud,kBAAoBL,EAAMM,aAC/Bxd,KAAKyd,gBAAkBP,EAAMQ,YAG7BR,EAAMvZ,kBACN3D,KAAK2D,gBAAkBuZ,EAAMvZ,iBAG7BuZ,EAAM9T,WACNuU,QAAQC,QAAQ,MAAMC,MAAK,WAAM,OAAAvX,EAAKzD,gBAAgBoD,KAAKiX,EAAM9T,cAGrEpJ,KAAKmI,eAAgB,EAErBnI,KAAKyF,eAAeQ,KAAKiX,KAIjCrb,EAAAZ,UAAAsb,iBAAA,SAAiBD,GACb,IAAIwB,EAAS,GACCxR,EAAAA,WAAWoI,KAAK1U,KAAK4V,mBAAmBC,cAAe,4CAC7DkI,KAAI,SAAA5L,GAAU,OAAA2L,EAAOpe,KAAK4M,EAAAA,WAAW0R,cAAc7L,OAC3DmK,EAAMkB,aAAeM,EAAOG,KAAK,KAEH,WAA1Bje,KAAKgE,mBACLsY,EAAMoB,WAAa1d,KAAK0K,WAAa4B,EAAAA,WAAWiL,WAAWvX,KAAK4V,mBAAmBC,cAAe,wCAAwC5C,MAAM2E,MAC5GtL,EAAAA,WAAW0R,cAAche,KAAK8X,eAAejC,eAAiB,OAI1GhU,EAAAZ,UAAA+G,oBAAA,WACI,GAAIhI,KAAKud,kBAAmB,CACxB,IAAIW,EAASle,KAAKud,kBAAkBY,MAAM,KAW1C,GAT8B,WAA1Bne,KAAKgE,kBAAiChE,KAAKyd,kBACvCzd,KAAK0K,WACL1K,KAAK6X,sCAAsC,KAAM7X,KAAKyd,gBAAiB,GAGvEzd,KAAK8X,eAAejC,cAAc5C,MAAM2E,MAAQ5X,KAAKyd,iBAIzDzd,KAAK0K,WAAY,CACjB,IAAI0T,EAAa9R,EAAAA,WAAWoI,KAAK1U,KAAK4V,mBAAmBC,cAAe,yDACpEwI,EAAWre,KAAKgG,cAAgBsG,EAAAA,WAAWoI,KAAK1U,KAAK4V,mBAAmBC,cAAe,sDAAwDvJ,EAAAA,WAAWoI,KAAK1U,KAAK4V,mBAAmBC,cAAe,uDAE1MuI,EAAWL,KAAI,SAAChF,EAAK7V,GAAU,OAAA6V,EAAI9F,MAAM2E,MAAQsG,EAAOhb,GAAS,QACjEmb,EAASN,KAAI,SAAChF,EAAK7V,GAAU,OAAA6V,EAAI9F,MAAM2E,MAAQsG,EAAOhb,GAAS,YAE9D,CACaoJ,EAAAA,WAAWoI,KAAK1U,KAAK8X,eAAejC,cAAe,4CACzDkI,KAAI,SAAC5L,EAAQjP,GAAU,OAAAiP,EAAOc,MAAM2E,MAAQsG,EAAOhb,GAAS,WAKhFrB,EAAAZ,UAAAub,gBAAA,SAAgBF,GACZ,GAAItc,KAAK2B,QAAS,CACd,IAAI2c,EAAwB,GAC5Bte,KAAK2B,QAAQoc,KAAI,SAAA9L,GACbqM,EAAY5e,KAAKuS,EAAOnH,OAAOmH,EAAOmL,QAG1Cd,EAAMiC,YAAcD,IAI5Bzc,EAAAZ,UAAA+H,mBAAA,WAAA,IAAA1C,EAAAtG,KAEU+c,EADU/c,KAAKic,aACOe,QAAQhd,KAAKoc,UACzC,GAAIW,EAAa,CACb,IACIwB,EADoB5B,KAAKQ,MAAMJ,GACXwB,YACxB,GAAIA,EAAa,CACb,IAAIC,EAAmB,GAEvBD,EAAYR,KAAI,SAAAX,GACZ,IAAIrE,EAAMzS,EAAKmY,gBAAgBrB,GAC3BrE,GACAyF,EAAiB9e,KAAKqZ,MAG9B/Y,KAAK+I,0BAA2B,EAChC/I,KAAK2B,QAAU6c,KAK3B3c,EAAAZ,UAAAwd,gBAAA,SAAgBrB,WACZ,IAAIpd,KAAK2B,QASL,OAAO,SARP,IAAgB,IAAAoI,EAAAvL,EAAAwB,KAAK2B,SAAOqI,EAAAD,EAAA9K,QAAA+K,EAAA7K,KAAA6K,EAAAD,EAAA9K,OAAE,CAAzB,IAAI8Z,EAAG/O,EAAA9K,MACR,GAAI6Z,EAAIqE,MAAQA,GAAOrE,EAAIjO,QAAUsS,EACjC,OAAOrE,sGAUvBlX,EAAAZ,UAAAyd,YAAA,WACI1e,KAAK8U,6BACL9U,KAAKoU,YAAc,KACnBpU,KAAKoG,YAAc,+BArnE1BuY,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,UACVlY,SAAU,k3JAqDVmY,UAAW,CAAC/e,GACZgf,gBAAiBC,EAAAA,wBAAwBC,QACzCC,cAAeC,EAAAA,kBAAkBC,4uIAhIJC,EAAAA,kBAAgEC,EAAAA,cA+ahBvf,SA/awBwf,EAAAA,yBAGUC,EAAAA,wDAkI9GC,EAAAA,2BAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,0BAEAA,EAAAA,+BAEAA,EAAAA,yBAEAA,EAAAA,yBAEAA,EAAAA,kCAEAA,EAAAA,mCAEAA,EAAAA,iCAEAA,EAAAA,yCAEAA,EAAAA,6CAEAA,EAAAA,yCAEAA,EAAAA,qCAEAA,EAAAA,sCAEAA,EAAAA,iCAEAA,EAAAA,6BAEAA,EAAAA,gCAEAA,EAAAA,wBAEAA,EAAAA,+BAEAA,EAAAA,6BAEAA,EAAAA,+BAEAC,EAAAA,qCAEAD,EAAAA,0CAEAC,EAAAA,yCAEAD,EAAAA,uBAEAA,EAAAA,gCAEAA,EAAAA,0BAEAA,EAAAA,oBAEAA,EAAAA,8BAEAA,EAAAA,kCAEAA,EAAAA,4BAEAA,EAAAA,8BAEAA,EAAAA,uBAEAA,EAAAA,kCAEAA,EAAAA,2BAEAA,EAAAA,4BAEAA,EAAAA,+BAEAA,EAAAA,8BAEAA,EAAAA,6BAEAA,EAAAA,0BAEAA,EAAAA,4BAEAA,EAAAA,6BAEAA,EAAAA,kCAEAA,EAAAA,gCAEAA,EAAAA,2BAEAA,EAAAA,0BAEAA,EAAAA,2BAEAA,EAAAA,gCAEAA,EAAAA,gCAEAA,EAAAA,kCAEAA,EAAAA,uBAEAA,EAAAA,2BAEAA,EAAAA,0BAEAA,EAAAA,wBAEAA,EAAAA,0BAEAA,EAAAA,oCAEAA,EAAAA,0BAEAA,EAAAA,8BAEAA,EAAAA,wBAEAA,EAAAA,4BAEAA,EAAAA,wBAEAA,EAAAA,2BAEAA,EAAAA,2BAEAA,EAAAA,2BAEAC,EAAAA,8BAEAA,EAAAA,uBAEAA,EAAAA,uBAEAA,EAAAA,yBAEAA,EAAAA,2BAEAA,EAAAA,4BAEAA,EAAAA,8BAEAA,EAAAA,oCAEAA,EAAAA,4BAEAA,EAAAA,6BAEAA,EAAAA,6BAEAA,EAAAA,2BAEAA,EAAAA,+BAEAA,EAAAA,6BAEAA,EAAAA,uCAEAA,EAAAA,6BAEAA,EAAAA,4BAEAA,EAAAA,2BAEAA,EAAAA,4BAEAA,EAAAA,+BAEAA,EAAAA,mCAEAC,EAAAA,UAASf,KAAA,CAAC,4CAEVe,EAAAA,UAASf,KAAA,CAAC,qDAEVe,EAAAA,UAASf,KAAA,CAAC,6DAEVe,EAAAA,UAASf,KAAA,CAAC,gDAEVe,EAAAA,UAASf,KAAA,CAAC,sCAEVe,EAAAA,UAASf,KAAA,CAAC,qDAEVe,EAAAA,UAASf,KAAA,CAAC,2CAEVgB,EAAAA,gBAAehB,KAAA,CAACiB,EAAAA,8BA2RhBJ,EAAAA,uBAOAA,EAAAA,qBAOAA,EAAAA,oBAOAA,EAAAA,4BAOAA,EAAAA,yBAQAA,EAAAA,yBAQAA,EAAAA,6BAOAA,EAAAA,yBAQAA,EAAAA,0BA4lDD,SAAAK,EAAmBC,EAAkB/d,EAAmCC,GAAxE,IAAAqE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAAmChC,KAAAiC,GAAAA,EACpEjC,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAanB,aAAaof,WAAU,WACxD3Z,EAAKyZ,GAAG/Z,eACRM,EAAKrE,GAAGie,0BAKpBJ,EAAA7e,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCA3D7BxB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,eACVlY,SAAU,ggHAkCVoY,gBAAiBC,EAAAA,wBAAwBC,QACzCC,cAAeC,EAAAA,kBAAkBC,kDAYVvd,SAA4B9B,SAjvEkDwf,EAAAA,sDAyuEpGE,EAAAA,MAAKb,KAAA,CAAC,gCAENa,EAAAA,MAAKb,KAAA,CAAC,sCAENa,EAAAA,0BA0HD,SAAAW,EAAmBL,EAAkBje,EAAuBC,GAAzC/B,KAAA+f,GAAAA,EAAkB/f,KAAA8B,GAAAA,EAAuB9B,KAAA+B,KAAAA,SAd5DzD,OAAAkL,eAAa4W,EAAAnf,UAAA,eAAY,KAAzB,WACI,OAAOjB,KAAKqgB,mBAEhB,SAAiB5W,GACbzJ,KAAKqgB,cAAgB5W,EACV,MAAPA,IAAgBA,EAAI6W,SAAS,MAAQ7W,EAAI6W,SAAS,UAClDC,QAAQC,IAAI,yIAGZxgB,KAAK+f,GAAG/Z,eAAiBhG,KAAKygB,mBAC9BzgB,KAAKygB,kBAAkB1a,4CAM/Bqa,EAAAnf,UAAA4G,gBAAA,WACI,GAAK7H,KAAK0gB,OAqBF1gB,KAAK2gB,4BAA8B3gB,KAAK2gB,2BAA2B9K,gBACnE7V,KAAK2gB,2BAA2B9K,cAAc5C,MAAMoD,OAAS/J,EAAAA,WAAWsU,2BAA6B,UAtB3F,EACV5gB,KAAK+f,GAAGjO,eAAiB9R,KAAK+f,GAAG1Y,qBACjCiF,EAAAA,WAAW6J,SAASnW,KAAK8B,GAAG+T,cAAe,6BAG/C,IAAIgL,EAAa7gB,KAAK8B,GAAG+T,cAAc6F,uBACnCmF,IACI7gB,KAAK+f,GAAG/Z,cACRhG,KAAK8gB,kBAAoBxU,EAAAA,WAAWiL,WAAWsJ,EAAY,wCAE3D7gB,KAAK8gB,kBAAoBxU,EAAAA,WAAWiL,WAAWsJ,EAAY,iCAGnE,IAAIE,EAAiBzU,EAAAA,WAAWqM,0BAChC3Y,KAAKghB,yBAAyBnL,cAAc5C,MAAMgO,aAAeF,EAAiB,KAE9E/gB,KAAKkhB,0BAA4BlhB,KAAKkhB,yBAAyBrL,gBAC/D7V,KAAKkhB,yBAAyBrL,cAAc5C,MAAMgO,aAAeF,EAAiB,MAS1F/gB,KAAKmhB,cAGTf,EAAAnf,UAAAkgB,WAAA,WAAA,IAAA7a,EAAAtG,KACIA,KAAK+B,KAAK+Y,mBAAkB,WACpBxU,EAAK8a,uBAAyB9a,EAAK8a,sBAAsBvL,gBACzDvP,EAAK+a,qBAAuB/a,EAAKgb,eAAeC,KAAKjb,GACrDA,EAAK8a,sBAAsBvL,cAAcd,iBAAiB,SAAUzO,EAAK+a,uBAGzE/a,EAAKkb,uBAAyBlb,EAAKkb,sBAAsB3L,gBACzDvP,EAAKmb,qBAAuBnb,EAAKob,eAAeH,KAAKjb,GACrDA,EAAKkb,sBAAsB3L,cAAcd,iBAAiB,SAAUzO,EAAKmb,uBAGxEnb,EAAKoa,SACNpa,EAAKqb,mBAAqBrb,EAAKsb,aAAaL,KAAKjb,GAE7CA,EAAKyZ,GAAG/Z,cACRM,EAAKma,kBAAkBoB,gBAAgBhM,cAAcd,iBAAiB,SAAUzO,EAAKqb,oBAErFrb,EAAKwb,oBAAoBjM,cAAcd,iBAAiB,SAAUzO,EAAKqb,yBAKvFvB,EAAAnf,UAAA8gB,aAAA,WACQ/hB,KAAKohB,uBAAyBphB,KAAKohB,sBAAsBvL,eACzD7V,KAAKohB,sBAAsBvL,cAAcb,oBAAoB,SAAUhV,KAAKqhB,sBAG5ErhB,KAAKwhB,uBAAyBxhB,KAAKwhB,sBAAsB3L,eACzD7V,KAAKwhB,sBAAsB3L,cAAcb,oBAAoB,SAAUhV,KAAKyhB,sBAG5EzhB,KAAK8hB,qBAAuB9hB,KAAK8hB,oBAAoBjM,eACrD7V,KAAK8hB,oBAAoBjM,cAAcb,oBAAoB,SAAUhV,KAAK2hB,oBAG1E3hB,KAAKygB,mBAAqBzgB,KAAKygB,kBAAkBoB,iBACjD7hB,KAAKygB,kBAAkBoB,gBAAgBhM,cAAcb,oBAAoB,SAAUhV,KAAK2hB,qBAIhGvB,EAAAnf,UAAAqgB,eAAA,WACI,IAAMrL,EAAajW,KAAKohB,sBAAsBvL,cAAcI,WAE5DjW,KAAK8hB,oBAAoBjM,cAAcI,WAAaA,EAEhDjW,KAAKwhB,uBAAyBxhB,KAAKwhB,sBAAsB3L,gBACzD7V,KAAKwhB,sBAAsB3L,cAAcI,WAAaA,GAG1DjW,KAAKgiB,8BAA+B,GAGxC5B,EAAAnf,UAAAygB,eAAA,WACI,IAAMzL,EAAajW,KAAKwhB,sBAAsB3L,cAAcI,WAC5DjW,KAAK8hB,oBAAoBjM,cAAcI,WAAaA,EAEhDjW,KAAKohB,uBAAyBphB,KAAKohB,sBAAsBvL,gBACzD7V,KAAKohB,sBAAsBvL,cAAcI,WAAaA,GAG1DjW,KAAKgiB,8BAA+B,GAGxC5B,EAAAnf,UAAA2gB,aAAA,SAAavX,GACLrK,KAAKgiB,6BACLhiB,KAAKgiB,8BAA+B,GAIpChiB,KAAKohB,uBAAyBphB,KAAKohB,sBAAsBvL,gBACzD7V,KAAKghB,yBAAyBnL,cAAc5C,MAAMgP,YAAc,EAAI5X,EAAM4B,OAAOgK,WAAa,MAG9FjW,KAAKwhB,uBAAyBxhB,KAAKwhB,sBAAsB3L,gBACzD7V,KAAKkhB,yBAAyBrL,cAAc5C,MAAMgP,YAAc,EAAI5X,EAAM4B,OAAOgK,WAAa,MAG9FjW,KAAK8gB,oBACL9gB,KAAK8gB,kBAAkBoB,UAAY7X,EAAM4B,OAAOiW,aAIxD9B,EAAAnf,UAAAkhB,oBAAA,SAAoBjf,GAApB,IAAAoD,EAAAtG,KACQA,KAAK+f,GAAG3c,OACJpD,KAAKoiB,sBACL/S,aAAarP,KAAKoiB,sBAGtBpiB,KAAKoiB,qBAAuB7S,YAAW,WACnC,IAAI8S,EAAOhI,KAAKiI,MAAMpf,EAAQoD,EAAKyZ,GAAGxV,MAClCgY,EAA+B,IAATF,EAAa,GAAKA,EAAO,GAAK/b,EAAKyZ,GAAGxV,KAC5DiY,EAAkC,IAATH,EAA4B,EAAf/b,EAAKyZ,GAAGxV,KAA0B,EAAfjE,EAAKyZ,GAAGxV,KAEjE8X,IAAS/b,EAAKmc,cACdnc,EAAKmc,YAAcJ,EACnB/b,EAAKyZ,GAAGrb,WAAWuB,KAAK,CACpBqE,MAAOiY,EACPhY,KAAMiY,EACNja,UAAWjC,EAAKyZ,GAAGxX,UACnBW,UAAW5C,EAAKyZ,GAAG7W,UACnBzF,QAAS6C,EAAKyZ,GAAGtc,QACjB+N,aAAclL,EAAKyZ,GAAGtc,SAAW6C,EAAKyZ,GAAGtc,QAAgB,OAAsB6C,EAAKyZ,GAAGtc,QAAgB,OAAGvE,MAAQ,KAClHuJ,cAAenC,EAAKyZ,GAAGtX,mBAGhCzI,KAAK+f,GAAGjc,sBAInBsc,EAAAnf,UAAAyhB,aAAA,WACI,IAAIC,EAAe3iB,KAAK+f,GAAGxR,eAAiBvO,KAAK+f,GAAG7gB,MAChD0jB,EAAaD,EAAeA,EAAa3jB,OAAQ,EACrD,OAAOqb,KAAKC,KAAKsI,EAAa5iB,KAAK+f,GAAGxV,OAG1C6V,EAAAnf,UAAA4S,qBAAA,SAAqB3Q,GACblD,KAAKygB,mBACLzgB,KAAKygB,kBAAkBoC,cAAc3f,IAI7Ckd,EAAAnf,UAAA6S,SAAA,SAASlC,GACD5R,KAAKygB,kBACLzgB,KAAKygB,kBAAkB3M,SAASlC,GAG5B5R,KAAK8hB,oBAAoBjM,cAAc/B,SACvC9T,KAAK8hB,oBAAoBjM,cAAc/B,SAASlC,IAGhD5R,KAAK8hB,oBAAoBjM,cAAcI,WAAarE,EAAQkE,KAC5D9V,KAAK8hB,oBAAoBjM,cAAcqM,UAAYtQ,EAAQmC,MAKvEqM,EAAAnf,UAAAyd,YAAA,WACI1e,KAAK+hB,eACL/hB,KAAK8gB,kBAAoB,+BAlRhCnC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,oBACVlY,SAAU,k4HA8CVoY,gBAAiBC,EAAAA,wBAAwBC,QACzCC,cAAeC,EAAAA,kBAAkBC,kDAsDVvd,SAv2EMwd,EAAAA,kBAAgEC,EAAAA,2CAqzE5FG,EAAAA,MAAKb,KAAA,CAAC,mCAENa,EAAAA,qCAEAE,EAAAA,UAASf,KAAA,CAAC,kDAEVe,EAAAA,UAASf,KAAA,CAAC,gDAEVe,EAAAA,UAASf,KAAA,CAAC,4CAEVe,EAAAA,UAASf,KAAA,CAAC,8CAEVe,EAAAA,UAASf,KAAA,CAAC,kDAEVe,EAAAA,UAASf,KAAA,CAAC,uDAEVe,EAAAA,UAASf,KAAA,CAAC,gDAEVe,EAAAA,UAASf,KAAA,CAACkE,EAAAA,gDAkBVrD,EAAAA,0BAmND,SAAAsD,EAAmBhD,GAAnB,IAAAzZ,EAAAtG,KAAmBA,KAAA+f,GAAAA,EACX/f,KAAKgjB,cACLhjB,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAavB,YAAYwf,WAAU,SAAA9e,GAC3DmF,EAAK2c,6BAKjBF,EAAA9hB,UAAA8E,SAAA,WACQ/F,KAAKgjB,aACLhjB,KAAKijB,mBAIbF,EAAA9hB,UAAAgiB,gBAAA,WACIjjB,KAAK+L,OAAS/L,KAAK+f,GAAGjU,SAAS9L,KAAK8K,OACpC9K,KAAKkJ,UAAYlJ,KAAK+L,OAAgC,IAAtB/L,KAAK+f,GAAG7W,UAAkB,YAAc,aAAgB,QAI5F6Z,EAAA9hB,UAAAiiB,QAAA,SAAQ7Y,GACArK,KAAKgjB,cAAgBhjB,KAAKmjB,gBAA8B9Y,EAAM4B,UAC9DjM,KAAKijB,kBACLjjB,KAAK+f,GAAGnV,KAAK,CACTC,cAAeR,EACfS,MAAO9K,KAAK8K,QAGhBwB,EAAAA,WAAWK,mBAKnBoW,EAAA9hB,UAAAmiB,WAAA,SAAW/Y,GACPrK,KAAKkjB,QAAQ7Y,IAGjB0Y,EAAA9hB,UAAA+hB,UAAA,WACI,OAAwC,IAAjChjB,KAAKqjB,yBAGhBN,EAAA9hB,UAAAkiB,gBAAA,SAAgBnL,GACZ,OAAO1L,EAAAA,WAAWC,SAASyL,EAAS,mBAAqB1L,EAAAA,WAAWC,SAASyL,EAAS,gCAG1F+K,EAAA9hB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCArE7BmD,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,oBACV0E,KAAM,CACFC,4BAA6B,cAC7BC,sBAAuB,SACvBC,kBAAmB,2BACnBC,cAAe,iBACfC,mBAAoB,0DAeD/hB,oCAVtB4d,EAAAA,MAAKb,KAAA,CAAC,oDAENa,EAAAA,uBA2BAoE,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,+BAavBiF,EAAAA,aAAYjF,KAAA,CAAC,gBAAiB,CAAC,+BAuChC,SAAAkF,EAAmB/D,EAAkB9d,GAArC,IAAAqE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAiC,GAAAA,EACjCjC,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAavB,YAAYwf,WAAU,SAAA9e,GAC3DmF,EAAK2c,4BAIba,EAAA7iB,UAAA8E,SAAA,WACI/F,KAAKijB,mBAGTa,EAAA7iB,UAAAiiB,QAAA,SAAQ7Y,GACJA,EAAMiL,kBAGVwO,EAAA7iB,UAAAgiB,gBAAA,WACI,GAAyB,WAArBjjB,KAAK+f,GAAGpd,SACR3C,KAAKkJ,UAAYlJ,KAAK+f,GAAGjU,SAAS9L,KAAK8K,OAAS9K,KAAK+f,GAAG7W,UAAY,OAEnE,GAAyB,aAArBlJ,KAAK+f,GAAGpd,SAAyB,CACtC,IAAIxB,EAAWnB,KAAK+f,GAAG9U,YAAYjL,KAAK8K,OACxC9K,KAAKkJ,UAAY/H,EAAWA,EAAS+J,MAAO,EAGhDlL,KAAKiC,GAAG+O,gBAGZ8S,EAAA7iB,UAAA8iB,sBAAA,WACI,IAAItb,EAAgBzI,KAAK+f,GAAG5W,eACxBjG,GAAS,EAEb,GAAIuF,GAAsC,aAArBzI,KAAK+f,GAAGpd,WAA4B3C,KAAK+f,GAAG5b,sBAAwBsE,EAAczJ,OAAS,GAE5G,IAAK,IAAIF,EAAI,EAAGA,EAAI2J,EAAczJ,OAAQF,IAAK,CAC3C,IAAIyR,EAAO9H,EAAc3J,GACzB,GAAIyR,EAAKzF,QAAU9K,KAAK8K,OAASyF,EAAKzF,QAAU9K,KAAK8K,MAAO,CACxD5H,EAAQpE,EACR,OAKZ,OAAOoE,GAGX4gB,EAAA7iB,UAAA+iB,cAAA,WACI,MAA4B,aAArBhkB,KAAK+f,GAAGpd,UAA2B3C,KAAK+jB,yBAA2B,GAG9ED,EAAA7iB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCAnE7BxB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,aACVlY,SAAU,sTAIVoY,gBAAiBC,EAAAA,wBAAwBiF,OACzC/E,cAAeC,EAAAA,kBAAkBC,kDAUVvd,SAnnF8E0d,EAAAA,oDA6mFpGE,EAAAA,0BAiFD,SAAAyE,EAAmBnE,EAAkB/d,GAArC,IAAAsE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAC7BhC,KAAKgjB,cACLhjB,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAarB,iBAAiBsf,WAAU,WAChE3Z,EAAK2G,SAAW3G,EAAKyZ,GAAG7S,WAAW5G,EAAK/E,iBAKpD2iB,EAAAjjB,UAAA8E,SAAA,WACQ/F,KAAKgjB,cACLhjB,KAAKiN,SAAWjN,KAAK+f,GAAG7S,WAAWlN,KAAKuB,QAKhD2iB,EAAAjjB,UAAAiiB,QAAA,SAAQ7Y,GACArK,KAAKgjB,aACLhjB,KAAK+f,GAAG/T,eAAe,CACnBnB,cAAeR,EACf2C,QAAShN,KAAKuB,KACduL,SAAU9M,KAAKkD,SAM3BghB,EAAAjjB,UAAAkjB,WAAA,SAAW9Z,GACHrK,KAAKgjB,aACLhjB,KAAK+f,GAAGlS,kBAAkBxD,IAKlC6Z,EAAAjjB,UAAAmjB,mBAAA,SAAmB/Z,GACf,GAAKrK,KAAKgjB,YAAV,CAIA,IAAMqB,EAA2Bha,EAAMia,cACjCC,EAAUvkB,KAAKwkB,sBAAsBH,GAEvCE,GACAA,EAAQE,QAGZpa,EAAMiL,mBAIV4O,EAAAjjB,UAAAyjB,iBAAA,SAAiBra,GACb,GAAKrK,KAAKgjB,YAAV,CAIA,IAAMqB,EAA2Bha,EAAMia,cACjCK,EAAU3kB,KAAK4kB,sBAAsBP,GAEvCM,GACAA,EAAQF,QAGZpa,EAAMiL,mBAMV4O,EAAAjjB,UAAA4jB,eAAA,SAAexa,GACNrK,KAAKgjB,aAIVhjB,KAAK+f,GAAG/T,eAAe,CACnBnB,cAAeR,EACf2C,QAAShN,KAAKuB,KACduL,SAAU9M,KAAKkD,SAQvBghB,EAAAjjB,UAAA6jB,kBAAA,WACQ9kB,KAAK+f,GAAG/Z,eACRsG,EAAAA,WAAWiL,WAAWvX,KAAK+f,GAAG/L,oBAAoBlS,GAAG+T,cAAe,+BAA+B4O,SAK3GP,EAAAjjB,UAAA8jB,eAAA,WACQ/kB,KAAK+f,GAAG/Z,gBAAkBhG,KAAK+f,GAAG3L,aAClC9H,EAAAA,WAAWiL,WAAWvX,KAAK+f,GAAG/L,oBAAoBlS,GAAG+T,cAAe,+BAA+B4O,SAI3GP,EAAAjjB,UAAAujB,sBAAA,SAAsBH,GAClB,IAAIE,EAAgCF,EAAIrN,mBACxC,OAAIuN,EACIjY,EAAAA,WAAWC,SAASgY,EAAS,oBACtBA,EAEAvkB,KAAKwkB,sBAAsBD,GAG/B,MAIfL,EAAAjjB,UAAA2jB,sBAAA,SAAsBP,GAClB,IAAIM,EAAgCN,EAAI3I,uBACxC,OAAIiJ,EACIrY,EAAAA,WAAWC,SAASoY,EAAS,oBACtBA,EAEA3kB,KAAK4kB,sBAAsBD,GAG/B,MAIfT,EAAAjjB,UAAA+hB,UAAA,WACI,OAAuC,IAAhChjB,KAAKglB,wBAGhBd,EAAAjjB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCApJ7BmD,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,mBACV0E,KAAM,CACF0B,2BAA4B,cAC5BxB,sBAAuB,WACvBC,kBAAmB,4EAeA7hB,SAA4B9B,mCAVlD0f,EAAAA,MAAKb,KAAA,CAAC,iCAENa,EAAAA,MAAKb,KAAA,CAAC,uDAENa,EAAAA,uBAoBAoE,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,+BAWvBiF,EAAAA,aAAYjF,KAAA,CAAC,WAAY,CAAC,uCAO1BiF,EAAAA,aAAYjF,KAAA,CAAC,oBAAqB,CAAC,qCAgBnCiF,EAAAA,aAAYjF,KAAA,CAAC,kBAAmB,CAAC,mCAgBjCiF,EAAAA,aAAYjF,KAAA,CAAC,gBAAiB,CAAC,YAAS,CAAAjR,KACxCkW,EAAAA,aAAYjF,KAAA,CAAC,sBAAuB,CAAC,YAAS,CAAAjR,KAC9CkW,EAAAA,aAAYjF,KAAA,CAAC,qBAAsB,CAAC,sCAapCiF,EAAAA,aAAYjF,KAAA,CAAC,qBAAkB,CAAAjR,KAC/BkW,EAAAA,aAAYjF,KAAA,CAAC,mBAAgB,CAAAjR,KAC7BkW,EAAAA,aAAYjF,KAAA,CAAC,iBAAc,CAAAjR,KAC3BkW,EAAAA,aAAYjF,KAAA,CAAC,uCAObiF,EAAAA,aAAYjF,KAAA,CAAC,qCAgEd,SAAAsG,EAAmBnF,EAAkB/d,GAArC,IAAAsE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAC7BhC,KAAKgjB,cACLhjB,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAarB,iBAAiBsf,WAAU,WAChE3Z,EAAK2G,SAAW3G,EAAKyZ,GAAG7S,WAAW5G,EAAK/E,iBAKpD2jB,EAAAjkB,UAAA8E,SAAA,WACQ/F,KAAKgjB,cACLhjB,KAAKiN,SAAWjN,KAAK+f,GAAG7S,WAAWlN,KAAKuB,QAKhD2jB,EAAAjkB,UAAAiiB,QAAA,SAAQ7Y,GACArK,KAAKgjB,aACLhjB,KAAK+f,GAAG/T,eAAe,CACnBnB,cAAeR,EACf2C,QAAShN,KAAKuB,KACduL,SAAU9M,KAAKkD,SAK3BgiB,EAAAjkB,UAAA+hB,UAAA,WACI,OAAuC,IAAhChjB,KAAKglB,wBAGhBE,EAAAjkB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCAlD7BmD,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,2BACV0E,KAAM,CACF0B,2BAA4B,cAC5BxB,sBAAuB,yDAeJ5hB,SAA4B9B,mCAVlD0f,EAAAA,MAAKb,KAAA,CAAC,yCAENa,EAAAA,MAAKb,KAAA,CAAC,uDAENa,EAAAA,uBAoBAoE,EAAAA,aAAYjF,KAAA,CAAC,WAAY,CAAC,+BA0C3B,SAAAuG,EAAmBpF,EAAkB/d,EAAoCF,GAAzE,IAAAwE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAAoChC,KAAA8B,GAAAA,EACjE9B,KAAKgjB,cACLhjB,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAapB,mBAAmBqf,WAAU,SAAC1e,GACnE+E,EAAK2G,SAAW3G,EAAKyZ,GAAGpR,OAAOrI,EAAK/E,KAAMA,cAMtD4jB,EAAAlkB,UAAAK,cAAA,SAAc+I,GACNrK,KAAKgjB,cACLhjB,KAAK+f,GAAGjS,oBAAoB,CACxBjD,cAAeR,EACf2C,QAAShN,KAAKuB,KACduL,SAAU9M,KAAKkD,QAGnBlD,KAAK8B,GAAG+T,cAAc4O,QACtBpa,EAAMiL,mBAId6P,EAAAlkB,UAAA+hB,UAAA,WACI,OAAwC,IAAjChjB,KAAKolB,yBAGhBD,EAAAlkB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCA/C7BmD,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,oBACV0E,KAAM,CACF8B,kCAAmC,WACnC3B,kBAAmB,4EAeA7hB,SAA4B9B,SA/4FtBsf,EAAAA,4CAq4F5BI,EAAAA,MAAKb,KAAA,CAAC,kCAENa,EAAAA,MAAKb,KAAA,CAAC,yDAENa,EAAAA,6BAcAoE,EAAAA,aAAYjF,KAAA,CAAC,cAAe,CAAC,+BAmC9B,SAAA0G,EAAmBvF,GAAA/f,KAAA+f,GAAAA,SAGnBuF,EAAArkB,UAAAiiB,QAAA,SAAQ7Y,GACArK,KAAKgjB,cACLhjB,KAAK+f,GAAG1K,UAAUrV,KAAKuB,KAAM8I,GAC7BA,EAAMiL,mBAIdgQ,EAAArkB,UAAA+hB,UAAA,WACI,OAAoC,IAA7BhjB,KAAKulB,8CApBnBjC,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,6DAQahd,mCAJtB4d,EAAAA,MAAKb,KAAA,CAAC,4CAENa,EAAAA,uBAIAoE,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,+BA4BxB,SAAA4G,EAAmBzF,EAAkBje,EAAuBC,GAAzC/B,KAAA+f,GAAAA,EAAkB/f,KAAA8B,GAAAA,EAAuB9B,KAAA+B,KAAAA,SAE5DyjB,EAAAvkB,UAAA4G,gBAAA,WAAA,IAAAvB,EAAAtG,KACQA,KAAKgjB,cACL1W,EAAAA,WAAW6J,SAASnW,KAAK8B,GAAG+T,cAAe,sBAC3C7V,KAAKylB,QAAU1S,SAASC,cAAc,QACtChT,KAAKylB,QAAQC,UAAY,mBACzB1lB,KAAK8B,GAAG+T,cAAczC,YAAYpT,KAAKylB,SAEvCzlB,KAAK+B,KAAK+Y,mBAAkB,WACxBxU,EAAKqf,yBAA2Brf,EAAKsf,YAAYrE,KAAKjb,GACtDA,EAAKmf,QAAQ1Q,iBAAiB,YAAazO,EAAKqf,+BAK5DH,EAAAvkB,UAAA4kB,mBAAA,WAAA,IAAAvf,EAAAtG,KACIA,KAAK+B,KAAK+Y,mBAAkB,WACxBxU,EAAKwf,0BAA4Bxf,EAAKyf,oBAAoBxE,KAAKjb,GAC/DyM,SAASgC,iBAAiB,YAAazO,EAAKwf,2BAE5Cxf,EAAK0f,wBAA0B1f,EAAK2f,kBAAkB1E,KAAKjb,GAC3DyM,SAASgC,iBAAiB,UAAWzO,EAAK0f,6BAIlDR,EAAAvkB,UAAAilB,qBAAA,WACQlmB,KAAK8lB,4BACL/S,SAASiC,oBAAoB,YAAahV,KAAK8lB,2BAC/C9lB,KAAK8lB,0BAA4B,MAGjC9lB,KAAKgmB,0BACLjT,SAASiC,oBAAoB,UAAWhV,KAAKgmB,yBAC7ChmB,KAAKgmB,wBAA0B,OAIvCR,EAAAvkB,UAAA2kB,YAAA,SAAYvb,GACY,IAAhBA,EAAM8b,QACNnmB,KAAK+f,GAAGtK,oBAAoBpL,GAC5BrK,KAAK6lB,uBAIbL,EAAAvkB,UAAA8kB,oBAAA,SAAoB1b,GAChBrK,KAAK+f,GAAG7J,eAAe7L,IAG3Bmb,EAAAvkB,UAAAglB,kBAAA,SAAkB5b,GACdrK,KAAK+f,GAAGxJ,kBAAkBlM,EAAOrK,KAAK8B,GAAG+T,eACzC7V,KAAKkmB,wBAGTV,EAAAvkB,UAAA+hB,UAAA,WACI,OAAyC,IAAlChjB,KAAKomB,0BAGhBZ,EAAAvkB,UAAAyd,YAAA,WACQ1e,KAAK2lB,0BACL3lB,KAAKylB,QAAQzQ,oBAAoB,YAAahV,KAAK2lB,0BAGvD3lB,KAAKkmB,iDA9EZ5C,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,kEAcahd,SAx9FMwd,EAAAA,kBAAgEC,EAAAA,4DA88F5FG,EAAAA,0BA8FD,SAAA4G,EAAmBtG,EAAkBje,EAAuBC,GAAzC/B,KAAA+f,GAAAA,EAAkB/f,KAAA8B,GAAAA,EAAuB9B,KAAA+B,KAAAA,SAE5DskB,EAAAplB,UAAA4G,gBAAA,WACQ7H,KAAKgjB,aACLhjB,KAAKmhB,cAIbkF,EAAAplB,UAAAkgB,WAAA,WAAA,IAAA7a,EAAAtG,KACIA,KAAK+B,KAAK+Y,mBAAkB,WACxBxU,EAAKggB,kBAAoBhgB,EAAKsf,YAAYrE,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKggB,mBAEzDhgB,EAAKigB,kBAAoBjgB,EAAKkgB,YAAYjF,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKigB,mBAEzDjgB,EAAKmgB,iBAAmBngB,EAAKogB,YAAYnF,KAAKjb,GAC9CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,WAAYzO,EAAKmgB,kBAExDngB,EAAKqgB,kBAAoBrgB,EAAKogB,YAAYnF,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKqgB,mBAEzDrgB,EAAKsgB,kBAAoBtgB,EAAKugB,YAAYtF,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKsgB,uBAIjEP,EAAAplB,UAAA8gB,aAAA,WACQ/hB,KAAKsmB,oBACLvT,SAASiC,oBAAoB,YAAahV,KAAKsmB,mBAC/CtmB,KAAKsmB,kBAAoB,MAGzBtmB,KAAKymB,mBACL1T,SAASiC,oBAAoB,WAAYhV,KAAKymB,kBAC9CzmB,KAAKymB,iBAAmB,MAGxBzmB,KAAK2mB,oBACL5T,SAASiC,oBAAoB,YAAahV,KAAK2mB,mBAC/C3mB,KAAK2mB,kBAAoB,MAGzB3mB,KAAK2mB,oBACL5T,SAASiC,oBAAoB,YAAahV,KAAK2mB,mBAC/C3mB,KAAK2mB,kBAAoB,MAGzB3mB,KAAK4mB,oBACL7T,SAASiC,oBAAoB,YAAahV,KAAK4mB,mBAC/C5mB,KAAK4mB,kBAAoB,OAIjCP,EAAAplB,UAAA2kB,YAAA,SAAYvb,GACsB,UAA1BA,EAAM4B,OAAOE,UAAkD,aAA1B9B,EAAM4B,OAAOE,UAA2BG,EAAAA,WAAWC,SAASlC,EAAM4B,OAAQ,oBAC/GjM,KAAK8B,GAAG+T,cAAckF,WAAY,EAElC/a,KAAK8B,GAAG+T,cAAckF,WAAY,GAG1CsL,EAAAplB,UAAAulB,YAAA,SAAYnc,GACRrK,KAAK+f,GAAG9G,kBAAkB5O,EAAOrK,KAAK8B,GAAG+T,gBAG7CwQ,EAAAplB,UAAA6lB,WAAA,SAAWzc,GACPA,EAAMiL,kBAGV+Q,EAAAplB,UAAAylB,YAAA,SAAYrc,GACRrK,KAAK+f,GAAGnG,kBAAkBvP,EAAOrK,KAAK8B,GAAG+T,gBAG7CwQ,EAAAplB,UAAA4lB,YAAA,SAAYxc,GACRrK,KAAK+f,GAAGtF,kBAAkBpQ,IAI9Bgc,EAAAplB,UAAA8lB,OAAA,SAAO1c,GACCrK,KAAKgjB,aACLhjB,KAAK+f,GAAGrF,aAAarQ,EAAOrK,KAAK8B,GAAG+T,gBAI5CwQ,EAAAplB,UAAA+hB,UAAA,WACI,OAA2C,IAApChjB,KAAKgnB,4BAGhBX,EAAAplB,UAAAyd,YAAA,WACI1e,KAAK+hB,yCA1GZuB,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,oEAgBahd,SA5iGMwd,EAAAA,kBAAgEC,EAAAA,8DAgiG5FG,EAAAA,sBAyFAoE,EAAAA,aAAYjF,KAAA,CAAC,OAAQ,CAAC,+BAgCvB,SAAAqI,EAAmBlH,EAAkBje,EAAuBC,GAAzC/B,KAAA+f,GAAAA,EAAkB/f,KAAA8B,GAAAA,EAAuB9B,KAAA+B,KAAAA,SAE5DklB,EAAAhmB,UAAA4G,gBAAA,WACQ7H,KAAKgjB,aACL1W,EAAAA,WAAW6J,SAASnW,KAAK8B,GAAG+T,cAAe,sBAKnDoR,EAAAhmB,UAAAiiB,QAAA,SAAQ7Y,GACJ,GAAIrK,KAAKgjB,YAGL,GAFAhjB,KAAK+f,GAAGnL,kBAAmB,EAEvB5U,KAAK+f,GAAG3L,aACR,GAAIpU,KAAK+f,GAAG3L,cAAgBpU,KAAK8B,GAAG+T,cAAe,CAC/C,IAAK7V,KAAK+f,GAAGtL,qBACT,OAGJzU,KAAKknB,kBAAiB,EAAM7c,GAC5BrK,KAAKmnB,iBAITnnB,KAAKmnB,YAKjBF,EAAAhmB,UAAAkmB,SAAA,WAAA,IAAA7gB,EAAAtG,KACIA,KAAK+f,GAAG7L,kBAAkBlU,KAAK8B,GAAG+T,cAAe7V,KAAKuB,KAAMvB,KAAK8K,MAAO9K,KAAK8M,UAC7ER,EAAAA,WAAW6J,SAASnW,KAAK8B,GAAG+T,cAAe,kBAC3C7V,KAAK+f,GAAG9a,WAAWgB,KAAK,CAAC6E,MAAO9K,KAAK8K,MAAOvJ,KAAMvB,KAAKuB,KAAM2B,MAAOlD,KAAK8M,WACzE9M,KAAK+B,KAAK+Y,mBAAkB,WACxBvL,YAAW,WACP,IAAI6X,EAAoB9gB,EAAK+gB,oBAAsB,0BAC/CC,EAAmBhb,EAAAA,WAAWiL,WAAWjR,EAAKxE,GAAG+T,cAAeuR,GAEhEE,GACAA,EAAiB7C,UAEtB,QAIXwC,EAAAhmB,UAAAimB,iBAAA,SAAiBK,EAAWld,GACpBkd,EACAvnB,KAAK+f,GAAG7a,eAAee,KAAK,CAAC6E,MAAO9K,KAAK+f,GAAGzL,iBAAkB/S,KAAMvB,KAAK+f,GAAG1L,gBAAiBxJ,cAAeR,EAAOnH,MAAOlD,KAAK+f,GAAGxL,sBAElIvU,KAAK+f,GAAG5a,aAAac,KAAK,CAAC6E,MAAO9K,KAAK+f,GAAGzL,iBAAkB/S,KAAMvB,KAAK+f,GAAG1L,gBAAiBxJ,cAAeR,EAAOnH,MAAOlD,KAAK+f,GAAGxL,sBAEpIjI,EAAAA,WAAWuI,YAAY7U,KAAK+f,GAAG3L,YAAa,kBAC5CpU,KAAK+f,GAAG3L,YAAc,KACtBpU,KAAK+f,GAAG1L,gBAAkB,KAC1BrU,KAAK+f,GAAGzL,iBAAmB,KAC3BtU,KAAK+f,GAAGjL,8BAIZmS,EAAAhmB,UAAA4jB,eAAA,SAAexa,GACPrK,KAAKgjB,cACDhjB,KAAK+f,GAAGtL,sBACRzU,KAAKknB,kBAAiB,EAAM7c,GAGhCA,EAAMiL,mBAKd2R,EAAAhmB,UAAAumB,gBAAA,SAAgBnd,GACRrK,KAAKgjB,cACDhjB,KAAK+f,GAAGtL,sBACRzU,KAAKknB,kBAAiB,EAAO7c,GAGjCA,EAAMiL,mBAOd2R,EAAAhmB,UAAAwmB,eAAA,SAAepd,GACPrK,KAAKgjB,cACD3Y,EAAMqC,SACN1M,KAAK0nB,mBAAmBrd,GAExBrK,KAAK2nB,eAAetd,KAKhC4c,EAAAhmB,UAAA2mB,YAAA,SAAYvd,GACR,GAAIrK,KAAKgjB,YAAa,CAClB,IAAI6E,EAAc7nB,KAAK8nB,SAASzd,EAAM4B,QACtC,GAAI4b,EAAa,CACb,IAAIE,EAAYzb,EAAAA,WAAWpJ,MAAM2kB,GAC7BG,EAAahoB,KAAKioB,8BAA8BJ,EAAaE,GAE7DC,IACIhoB,KAAK+f,GAAGtL,sBACRzU,KAAKknB,kBAAiB,EAAM7c,GAGhCiC,EAAAA,WAAW4b,oBAAoB7d,EAAM4B,OAAQ,QAC7CK,EAAAA,WAAW4b,oBAAoBF,EAAY,UAG/C3d,EAAMiL,oBAMlB2R,EAAAhmB,UAAAknB,UAAA,SAAU9d,GACN,GAAIrK,KAAKgjB,YAAa,CAClB,IAAI6E,EAAc7nB,KAAK8nB,SAASzd,EAAM4B,QACtC,GAAI4b,EAAa,CACb,IAAIE,EAAYzb,EAAAA,WAAWpJ,MAAM2kB,GAC7BG,EAAahoB,KAAKooB,8BAA8BP,EAAaE,GAE7DC,IACIhoB,KAAK+f,GAAGtL,sBACRzU,KAAKknB,kBAAiB,EAAM7c,GAGhCiC,EAAAA,WAAW4b,oBAAoB7d,EAAM4B,OAAQ,QAC7CK,EAAAA,WAAW4b,oBAAoBF,EAAY,UAG/C3d,EAAMiL,oBAMlB2R,EAAAhmB,UAAAonB,YAAA,SAAYhe,GACJrK,KAAKgjB,aACLhjB,KAAK0nB,mBAAmBrd,IAKhC4c,EAAAhmB,UAAAqnB,aAAA,SAAaje,GACLrK,KAAKgjB,aACLhjB,KAAK2nB,eAAetd,IAI5B4c,EAAAhmB,UAAA6mB,SAAA,SAAS9P,GACL,GAAIA,EAAS,CAET,IADA,IAAI7D,EAAO6D,EACJ7D,IAAS7H,EAAAA,WAAWC,SAAS4H,EAAM,mBACtCA,EAAOA,EAAK9H,cAGhB,OAAO8H,EAGP,OAAO,MAIf8S,EAAAhmB,UAAAymB,mBAAA,SAAmBrd,GACf,IAAIwd,EAAc7nB,KAAK8nB,SAASzd,EAAM4B,QACtC,GAAI4b,EAAa,CACb,IAAIG,EAAahoB,KAAKuoB,2BAA2BV,GAE7CG,IACIhoB,KAAK+f,GAAGtL,sBACRzU,KAAKknB,kBAAiB,EAAM7c,GAGhCiC,EAAAA,WAAW4b,oBAAoB7d,EAAM4B,OAAQ,QAC7CK,EAAAA,WAAW4b,oBAAoBF,EAAY,SAC3C3d,EAAMiL,oBAKlB2R,EAAAhmB,UAAA0mB,eAAA,SAAetd,GACX,IAAIwd,EAAc7nB,KAAK8nB,SAASzd,EAAM4B,QACtC,GAAI4b,EAAa,CACb,IAAIG,EAAahoB,KAAKwoB,uBAAuBX,GAEzCG,IACIhoB,KAAK+f,GAAGtL,sBACRzU,KAAKknB,kBAAiB,EAAM7c,GAGhCiC,EAAAA,WAAW4b,oBAAoB7d,EAAM4B,OAAQ,QAC7CK,EAAAA,WAAW4b,oBAAoBF,EAAY,SAC3C3d,EAAMiL,oBAKlB2R,EAAAhmB,UAAAsnB,2BAAA,SAA2BpU,GACvB,IAAIsU,EAAWtU,EAAKuH,uBAEpB,IAAK+M,EAAU,CACX,IAAIC,EAAcvU,EAAK9H,cAAcqP,uBACjCgN,IACAD,EAAWC,EAAYC,kBAI/B,OAAIF,EACInc,EAAAA,WAAWC,SAASkc,EAAU,qBACvBA,EAEAzoB,KAAKuoB,2BAA2BE,GAGpC,MAIfxB,EAAAhmB,UAAAunB,uBAAA,SAAuBrU,GACnB,IAAIyU,EAAWzU,EAAK6C,mBAEpB,IAAK4R,EAAU,CACX,IAAIrE,EAAUpQ,EAAK9H,cAAc2K,mBAC7BuN,IACAqE,EAAWrE,EAAQsE,mBAI3B,OAAID,EACItc,EAAAA,WAAWC,SAASqc,EAAU,qBACvBA,EAEA5oB,KAAKwoB,uBAAuBI,GAGhC,MAIf3B,EAAAhmB,UAAAgnB,8BAAA,SAA8B9T,EAAejR,GACzC,IAAIqhB,EAAUpQ,EAAK9H,cAAc2K,mBAEjC,GAAIuN,EAAS,CACT,IAAIqE,EAAWrE,EAAQzL,SAAS5V,GAEhC,OAAI0lB,GAAYtc,EAAAA,WAAWC,SAASqc,EAAU,qBACnCA,EAGJ,KAGP,OAAO,MAIf3B,EAAAhmB,UAAAmnB,8BAAA,SAA8BjU,EAAejR,GACzC,IAAIyhB,EAAUxQ,EAAK9H,cAAcqP,uBAEjC,GAAIiJ,EAAS,CACT,IAAI8D,EAAW9D,EAAQ7L,SAAS5V,GAEhC,OAAIulB,GAAYnc,EAAAA,WAAWC,SAASkc,EAAU,qBACnCA,EAGJ,KAGP,OAAO,MAIfxB,EAAAhmB,UAAA+hB,UAAA,WACI,OAAwC,IAAjChjB,KAAK8oB,kDAlSnBxF,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,iEAcahd,SAzpGMwd,EAAAA,kBAAgEC,EAAAA,wCA+oG5FG,EAAAA,MAAKb,KAAA,CAAC,kCAENa,EAAAA,MAAKb,KAAA,CAAC,0CAENa,EAAAA,MAAKb,KAAA,CAAC,4DAENa,EAAAA,kCAEAA,EAAAA,uBAUAoE,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,mCAkDvBiF,EAAAA,aAAYjF,KAAA,CAAC,gBAAiB,CAAC,oCAW/BiF,EAAAA,aAAYjF,KAAA,CAAC,iBAAkB,CAAC,mCAWhCiF,EAAAA,aAAYjF,KAAA,CAAC,cAAe,CAAC,YAAS,CAAAjR,KACtCkW,EAAAA,aAAYjF,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAjR,KAC5CkW,EAAAA,aAAYjF,KAAA,CAAC,mBAAoB,CAAC,gCAUlCiF,EAAAA,aAAYjF,KAAA,CAAC,oBAAqB,CAAC,8BAsBnCiF,EAAAA,aAAYjF,KAAA,CAAC,kBAAmB,CAAC,gCAsBjCiF,EAAAA,aAAYjF,KAAA,CAAC,oBAAqB,CAAC,iCAOnCiF,EAAAA,aAAYjF,KAAA,CAAC,qBAAsB,CAAC,+BAkJrC,SAAAmK,EAAmBjnB,GAAA9B,KAAA8B,GAAAA,SAEnBinB,EAAA9nB,UAAA+hB,UAAA,WACI,OAAqC,IAA9BhjB,KAAKgpB,+CAZnB1F,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,8DAl7GmBQ,EAAAA,4CAs7G5BI,EAAAA,MAAKb,KAAA,CAAC,8CAENa,EAAAA,0BAeD,SAAAwJ,EAAmBlJ,EAAkBmJ,GAAlBlpB,KAAA+f,GAAAA,EAAkB/f,KAAAkpB,YAAAA,SAGrCD,EAAAhoB,UAAAiiB,QAAA,SAAQ7Y,GACJrK,KAAK+f,GAAG9K,YAAYjV,KAAKkpB,YAAY3nB,MACrC8I,EAAMiL,2CAVbgO,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,kEAIahd,SAA2BknB,sCAEjDlF,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,+BAaxB,SAAAuK,EAAmBpJ,EAAkBmJ,GAAlBlpB,KAAA+f,GAAAA,EAAkB/f,KAAAkpB,YAAAA,SAGrCC,EAAAloB,UAAAiiB,QAAA,SAAQ7Y,GACJrK,KAAK+f,GAAG7K,YAAYlV,KAAKkpB,YAAY3nB,KAAMvB,KAAKkpB,YAAYpnB,GAAG+T,eAC/DxL,EAAMiL,2CAVbgO,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,kEAIahd,SAA2BknB,sCAEjDlF,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,+BAYxB,SAAAwK,EAAmBrJ,EAAkBmJ,GAAlBlpB,KAAA+f,GAAAA,EAAkB/f,KAAAkpB,YAAAA,SAGrCE,EAAAnoB,UAAAiiB,QAAA,SAAQ7Y,GACJrK,KAAK+f,GAAG3K,cAAcpV,KAAKkpB,YAAY3nB,MACvC8I,EAAMiL,2CAVbgO,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,oEAIahd,SAA2BknB,sCAEjDlF,EAAAA,aAAYjF,KAAA,CAAC,QAAS,CAAC,+BA2BxB,SAAAyK,EAAmBtJ,EAA8BuJ,EAAmDJ,GAAjFlpB,KAAA+f,GAAAA,EAA8B/f,KAAAspB,eAAAA,EAAmDtpB,KAAAkpB,YAAAA,SAEpGG,EAAApoB,UAAAoF,mBAAA,WAAA,IAAAC,EAAAtG,KACIA,KAAKuG,UAAUC,SAAQ,SAACrD,GACpB,OAAQA,EAAKsD,WACT,IAAK,QACDH,EAAKijB,cAAgBpmB,EAAKwD,SAC1B,MAEJ,IAAK,SACDL,EAAKkjB,eAAiBrmB,EAAKwD,cAM3CrI,OAAAkL,eAAI6f,EAAApoB,UAAA,UAAO,KAAX,WACI,OAAQjB,KAAK+f,GAAG3L,aAAepU,KAAKspB,gBAAkBtpB,KAAK+f,GAAG3L,cAAgBpU,KAAKspB,eAAexnB,GAAG+T,eAC5F7V,KAAKkpB,aAAoC,QAArBlpB,KAAK+f,GAAG1b,UAAsBrE,KAAK+f,GAAGvK,aAAaxV,KAAKkpB,YAAY3nB,gEAtCxGod,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,eACVlY,SAAU,uSAQVuY,cAAeC,EAAAA,kBAAkBC,kDAUVvd,SAA0ColB,EAAcwC,WAAA,CAAA,CAAA9b,KAAhD+b,EAAAA,kBAAkFX,EAAWU,WAAA,CAAA,CAAA9b,KAA1C+b,EAAAA,iDANjF9J,EAAAA,gBAAehB,KAAA,CAACiB,EAAAA,mCAkEjB,SAAA8J,EAAmB5J,EAAkB/d,EAAmCC,GAAxE,IAAAqE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAAmChC,KAAAiC,GAAAA,EACpEjC,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAarB,iBAAiBsf,WAAU,WAChE3Z,EAAK4I,QAAU5I,EAAKyZ,GAAG7S,WAAW5G,EAAKpH,OACvCoH,EAAKrE,GAAG+O,yBAIhB2Y,EAAA1oB,UAAA8E,SAAA,WACI/F,KAAKkP,QAAUlP,KAAK+f,GAAG7S,WAAWlN,KAAKd,QAG3CyqB,EAAA1oB,UAAAiiB,QAAA,SAAQ7Y,GACCrK,KAAK4pB,UACN5pB,KAAK+f,GAAGnR,mBAAmB,CACvB/D,cAAeR,EACfyC,SAAU9M,KAAKkD,OAChBlD,KAAKd,OAEZoN,EAAAA,WAAWK,kBAGfgd,EAAA1oB,UAAA4oB,QAAA,WACI7pB,KAAK8pB,SAAU,GAGnBH,EAAA1oB,UAAA8oB,OAAA,WACI/pB,KAAK8pB,SAAU,GAGnBH,EAAA1oB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCApE7BxB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,qBACVlY,SAAU,suBAYVoY,gBAAiBC,EAAAA,wBAAwBiF,OACzC/E,cAAeC,EAAAA,kBAAkBC,kDAsBVvd,SAA4B9B,SA7jHkDwf,EAAAA,uDA2iHpGE,EAAAA,qBAEAA,EAAAA,qBAEAA,EAAAA,uBAEAA,EAAAA,oBAEAA,EAAAA,yBAEAA,EAAAA,0BAoFD,SAAAuK,EAAmBjK,EAAkB/d,EAAmCC,GAAxE,IAAAqE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAAmChC,KAAAiC,GAAAA,EACpEjC,KAAKggB,aAAehgB,KAAK+f,GAAG/d,aAAarB,iBAAiBsf,WAAU,WAChE3Z,EAAK4I,QAAU5I,EAAKyZ,GAAG7S,WAAW5G,EAAKpH,OACvCoH,EAAKrE,GAAG+O,yBAIhBgZ,EAAA/oB,UAAA8E,SAAA,WACI/F,KAAKkP,QAAUlP,KAAK+f,GAAG7S,WAAWlN,KAAKd,QAG3C8qB,EAAA/oB,UAAAiiB,QAAA,SAAQ7Y,GACCrK,KAAK4pB,UACN5pB,KAAK+f,GAAGlR,sBAAsB,CAC1BhE,cAAeR,EACfyC,SAAU9M,KAAKkD,OAChBlD,KAAKd,OAEZoN,EAAAA,WAAWK,kBAGfqd,EAAA/oB,UAAA4oB,QAAA,WACI7pB,KAAK8pB,SAAU,GAGnBE,EAAA/oB,UAAA8oB,OAAA,WACI/pB,KAAK8pB,SAAU,GAGnBE,EAAA/oB,UAAAyd,YAAA,WACQ1e,KAAKggB,cACLhgB,KAAKggB,aAAaG,wCAtE7BxB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,kBACVlY,SAAU,gyBAYVoY,gBAAiBC,EAAAA,wBAAwBiF,OACzC/E,cAAeC,EAAAA,kBAAkBC,kDAwBVvd,SAA4B9B,SAzoHkDwf,EAAAA,uDAqnHpGE,EAAAA,qBAEAA,EAAAA,qBAEAA,EAAAA,uBAEAA,EAAAA,oBAEAA,EAAAA,wBAEAA,EAAAA,yBAEAA,EAAAA,0BAgFD,SAAAwK,EAAmBlK,EAAkB/d,EAAmCC,GAAxE,IAAAqE,EAAAtG,KAAmBA,KAAA+f,GAAAA,EAAkB/f,KAAAgC,aAAAA,EAAmChC,KAAAiC,GAAAA,EACpEjC,KAAKkqB,wBAA0BlqB,KAAK+f,GAAG/d,aAAanB,aAAaof,WAAU,WACvE3Z,EAAK4I,QAAU5I,EAAK6jB,wBAGxBnqB,KAAKoqB,4BAA8BpqB,KAAK+f,GAAG/d,aAAarB,iBAAiBsf,WAAU,WAC/E3Z,EAAK4I,QAAU5I,EAAK6jB,+BAI5BF,EAAAhpB,UAAA8E,SAAA,WACI/F,KAAKkP,QAAUlP,KAAKmqB,sBAGxBF,EAAAhpB,UAAAiiB,QAAA,SAAQ7Y,GACCrK,KAAK4pB,UACF5pB,KAAK+f,GAAG7gB,OAASc,KAAK+f,GAAG7gB,MAAMF,OAAS,GACxCgB,KAAK+f,GAAGhR,uBAAuB1E,GAAQrK,KAAKkP,SAIpD5C,EAAAA,WAAWK,kBAGfsd,EAAAhpB,UAAA4oB,QAAA,WACI7pB,KAAK8pB,SAAU,GAGnBG,EAAAhpB,UAAA8oB,OAAA,WACI/pB,KAAK8pB,SAAU,GAGnBG,EAAAhpB,UAAAopB,WAAA,WACI,OAAOrqB,KAAK4pB,WAAa5pB,KAAK+f,GAAG7gB,QAAUc,KAAK+f,GAAG7gB,MAAMF,QAG7DirB,EAAAhpB,UAAAyd,YAAA,WACQ1e,KAAKoqB,6BACLpqB,KAAKoqB,4BAA4BjK,cAGjCngB,KAAKkqB,yBACLlqB,KAAKkqB,wBAAwB/J,eAIrC8J,EAAAhpB,UAAAkpB,mBAAA,WAIQ,IAIM1gB,EALV,OAFAzJ,KAAKiC,GAAG+O,eAEJhR,KAAK+f,GAAGxR,eACF9E,EAAMzJ,KAAK+f,GAAGxR,gBACL9E,EAAIzK,OAAS,GAAKgB,KAAK+f,GAAG3W,WAAapJ,KAAK+f,GAAG3W,UAAUpK,OAAS,GAAKgB,KAAKsqB,8BAGrF7gB,EAAMzJ,KAAK+f,GAAG7gB,QACLuK,EAAIzK,OAAS,GAAKgB,KAAK+f,GAAG3W,WAAapJ,KAAK+f,GAAG3W,UAAUpK,OAAS,GAAKgB,KAAK+f,GAAG3W,UAAUpK,SAAWyK,EAAIzK,QAI/HirB,EAAAhpB,UAAAqpB,2BAAA,mBACI,GAAKtqB,KAAK+f,GAAGxR,cAGR,KACD,IAAoB,IAAAxE,EAAAvL,EAAAwB,KAAK+f,GAAGxR,eAAavE,EAAAD,EAAA9K,QAAA+K,EAAA7K,KAAA6K,EAAAD,EAAA9K,OAAE,CAAtC,IAAI+N,EAAOhD,EAAA9K,MACZ,IAAKc,KAAK+f,GAAG7S,WAAWF,GACpB,OAAO,oGAGf,OAAO,EARP,OAAO,4BAhGlB2R,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,wBACVlY,SAAU,0wBAYVoY,gBAAiBC,EAAAA,wBAAwBiF,OACzC/E,cAAeC,EAAAA,kBAAkBC,kDAoBVvd,SAA4B9B,SAjtHkDwf,EAAAA,uDAisHpGE,EAAAA,uBAEAA,EAAAA,oBAEAA,EAAAA,yBAEAA,EAAAA,0BA4FD,SAAA8K,EAAmBzoB,GAAA9B,KAAA8B,GAAAA,SAEnByoB,EAAAtpB,UAAA4G,gBAAA,WACIyE,EAAAA,WAAW6J,SAASnW,KAAK8B,GAAG+T,cAAe,+DAVlDyN,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,uEA7xHmBQ,EAAAA,6CAiyH5BI,EAAAA,MAAKb,KAAA,CAAC,6CA8BP,SAAA4L,EAAmBzK,EAAkBje,EAAuBC,GAAzC/B,KAAA+f,GAAAA,EAAkB/f,KAAA8B,GAAAA,EAAuB9B,KAAA+B,KAAAA,SAE5DyoB,EAAAvpB,UAAA4G,gBAAA,WACQ7H,KAAKgjB,cACLhjB,KAAK8B,GAAG+T,cAAc4U,WAAY,EAClCzqB,KAAKmhB,eAIbqJ,EAAAvpB,UAAAkgB,WAAA,WAAA,IAAA7a,EAAAtG,KACIA,KAAK+B,KAAK+Y,mBAAkB,WACxBxU,EAAKggB,kBAAoBhgB,EAAKsf,YAAYrE,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKggB,mBAEzDhgB,EAAKigB,kBAAoBjgB,EAAKkgB,YAAYjF,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKigB,mBAEzDjgB,EAAKokB,gBAAkBpkB,EAAKqkB,UAAUpJ,KAAKjb,GAC3CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,UAAWzO,EAAKokB,iBAEvDpkB,EAAKmgB,iBAAmBngB,EAAKwgB,WAAWvF,KAAKjb,GAC7CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,WAAYzO,EAAKmgB,kBAExDngB,EAAKsgB,kBAAoBtgB,EAAKugB,YAAYtF,KAAKjb,GAC/CA,EAAKxE,GAAG+T,cAAcd,iBAAiB,YAAazO,EAAKsgB,uBAIjE4D,EAAAvpB,UAAA8gB,aAAA,WACQ/hB,KAAKsmB,oBACLvT,SAASiC,oBAAoB,YAAahV,KAAKsmB,mBAC/CtmB,KAAKsmB,kBAAoB,MAGzBtmB,KAAKumB,oBACLxT,SAASiC,oBAAoB,YAAahV,KAAKumB,mBAC/CvmB,KAAKumB,kBAAoB,MAGzBvmB,KAAK0qB,kBACL3X,SAASiC,oBAAoB,UAAWhV,KAAK0qB,iBAC7C1qB,KAAK0qB,gBAAkB,MAGvB1qB,KAAKymB,mBACL1T,SAASiC,oBAAoB,WAAYhV,KAAKymB,kBAC9CzmB,KAAKymB,iBAAmB,MAGxBzmB,KAAK4mB,oBACL7T,SAASiC,oBAAoB,YAAahV,KAAK4mB,mBAC/C5mB,KAAK4mB,kBAAoB,OAIjC4D,EAAAvpB,UAAA2kB,YAAA,SAAYvb,GACJiC,EAAAA,WAAWC,SAASlC,EAAM4B,OAAQ,qCAClCjM,KAAK8B,GAAG+T,cAAckF,WAAY,EAElC/a,KAAK8B,GAAG+T,cAAckF,WAAY,GAG1CyP,EAAAvpB,UAAAulB,YAAA,SAAYnc,GACRrK,KAAK+f,GAAG/E,eAAe3Q,EAAOrK,KAAKkD,QAGvCsnB,EAAAvpB,UAAA0pB,UAAA,SAAUtgB,GACNrK,KAAK+f,GAAGlE,aAAaxR,GACrBrK,KAAK8B,GAAG+T,cAAckF,WAAY,GAGtCyP,EAAAvpB,UAAA6lB,WAAA,SAAWzc,GACPrK,KAAK+f,GAAG5E,cAAc9Q,EAAOrK,KAAKkD,MAAOlD,KAAK8B,GAAG+T,eACjDxL,EAAMiL,kBAGVkV,EAAAvpB,UAAA4lB,YAAA,SAAYxc,GACRrK,KAAK+f,GAAGnE,eAAevR,EAAOrK,KAAK8B,GAAG+T,gBAG1C2U,EAAAvpB,UAAA+hB,UAAA,WACI,OAAwC,IAAjChjB,KAAK4qB,yBAIhBJ,EAAAvpB,UAAA8lB,OAAA,SAAO1c,GACCrK,KAAKgjB,aAAehjB,KAAK+f,GAAG9E,aAC5Bjb,KAAK+f,GAAGjE,UAAUzR,EAAOrK,KAAK8B,GAAG+T,eAGrCxL,EAAMiL,2CA/GbgO,EAAAA,UAAS1E,KAAA,CAAC,CACPC,SAAU,iEAoBahd,SA/zHMwd,EAAAA,kBAAgEC,EAAAA,yCA+yH5FG,EAAAA,MAAKb,KAAA,CAAC,oDAENa,EAAAA,sBAkGAoE,EAAAA,aAAYjF,KAAA,CAAC,OAAQ,CAAC,+BA8DvB,SAAAiM,EAAmB9K,GAAA/f,KAAA+f,GAAAA,EAJV/f,KAAA8qB,aAAuB,SAMhCD,EAAA5pB,UAAA8E,SAAA,WAAA,IAAAO,EAAAtG,KACIA,KAAK+qB,eAAiB,SAAA7rB,GAClBoH,EAAKgL,iBAAiBpS,MAAQA,EAC9BoH,EAAKyZ,GAAGnX,YAIhBiiB,EAAA5pB,UAAA+pB,cAAA,SAAc9rB,GACVc,KAAKsR,iBAAiBpS,MAAQA,EAEZ,YAAdc,KAAK2N,MAAgC,KAAVzO,GAC3Bc,KAAK+f,GAAGnX,WAIhBiiB,EAAA5pB,UAAAgqB,wBAAA,SAAwB5gB,GACpBrK,KAAK+f,GAAGnX,UACRyB,EAAMiL,kBAGVuV,EAAA5pB,UAAAiqB,sBAAA,SAAsB7gB,GACA,UAAdA,EAAM+S,MACNpd,KAAK+f,GAAGnX,UACRyB,EAAMiL,4CA7EjBqJ,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,4BACVlY,SAAU,2iDAgBVuY,cAAeC,EAAAA,kBAAkBC,kDAkCVvd,oCA9BtB4d,EAAAA,oBAEAA,EAAAA,gCAEAA,EAAAA,8BAEAA,EAAAA,2BAEAA,EAAAA,iCAEAA,EAAAA,iCAEAA,EAAAA,sBAEAA,EAAAA,sBAEAA,EAAAA,sBAEAA,EAAAA,6BAEAA,EAAAA,wBAEAA,EAAAA,+BAEAA,EAAAA,2BAEAA,EAAAA,0BAmJD,SAAA0L,EAAmBrpB,EAAuBie,EAAkBqL,EAA4BC,GAArErrB,KAAA8B,GAAAA,EAAuB9B,KAAA+f,GAAAA,EAAkB/f,KAAAorB,SAAAA,EAA4BprB,KAAAqrB,OAAAA,EAlD/ErrB,KAAA2N,KAAe,OAEf3N,KAAAkT,QAAkB,MAElBlT,KAAAsrB,UAAoB,EAIpBtrB,KAAAyQ,SAAmBC,EAAAA,eAAeE,IAElC5Q,KAAAurB,cAAwB,EAExBvrB,KAAAwrB,iBAA2B,EAE3BxrB,KAAAyrB,iBAA2B,EAE3BzrB,KAAA0rB,gBAA0B,EAE1B1rB,KAAA2rB,eAAyB,EAEzB3rB,KAAA4rB,aAAuB,EAMvB5rB,KAAA6rB,eAAyB,EAkBzB7rB,KAAA8qB,aAAuB,SAgChCK,EAAAlqB,UAAA8E,SAAA,WAAA,IAAAO,EAAAtG,KACSA,KAAK+f,GAAGtc,QAAQzD,KAAK8K,QACtB9K,KAAK8rB,4BAGT9rB,KAAK+rB,wBAA0B/rB,KAAKqrB,OAAOW,oBAAoB/L,WAAU,WACrE3Z,EAAK2lB,2BACL3lB,EAAK4lB,6BAGTlsB,KAAKmsB,kBAAoBnsB,KAAK+f,GAAG/d,aAAahB,aAAaif,WAAU,WACjE3Z,EAAK8lB,iBAGTpsB,KAAKisB,2BACLjsB,KAAKksB,2BAGTf,EAAAlqB,UAAAgrB,yBAAA,WAAA,MAAA3lB,EAAAtG,KACIA,KAAKqsB,WAAarsB,KAAKssB,mBACsB,QADNC,EACvCvsB,KAAKqrB,OAAOmB,uBAAuBxsB,KAAK2N,aAAK,IAAA4e,OAAA,EAAAA,EAAExO,KAAI,SAAAX,GAC/C,MAAO,CAACqP,MAAOnmB,EAAK+kB,OAAOqB,eAAetP,GAAMle,MAAOke,QAI/D+N,EAAAlqB,UAAAirB,wBAAA,WACIlsB,KAAK2sB,gBAAkB,CACnB,CAACF,MAAOzsB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgBC,WAAY3tB,MAAOwR,EAAAA,eAAeE,KACrF,CAAC6b,MAAOzsB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgBE,WAAY5tB,MAAOwR,EAAAA,eAAeC,MAI7Fwa,EAAAlqB,UAAAoF,mBAAA,WAAA,IAAAC,EAAAtG,KACIA,KAAKuG,UAAUC,SAAQ,SAACrD,GACpB,OAAOA,EAAKsD,WACR,IAAK,SACDH,EAAKM,eAAiBzD,EAAKwD,SAC/B,MAEA,IAAK,SACDL,EAAKymB,eAAiB5pB,EAAKwD,SAC/B,MAEA,IAAK,SACDL,EAAKS,eAAiB5D,EAAKwD,SAC/B,MAEA,QACIL,EAAKymB,eAAiB5pB,EAAKwD,cAM3CwkB,EAAAlqB,UAAA6qB,0BAAA,WACI,IAAIkB,EAAmBhtB,KAAKitB,sBAC5BjtB,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAyB,OAAhB9K,KAAKkT,QAAmB,CAAChU,MAAO,KAAMiQ,UAAW6d,GAAoB,CAAC,CAAC9tB,MAAO,KAAMiQ,UAAW6d,EAAkBvc,SAAUzQ,KAAKyQ,YAGlK0a,EAAAlqB,UAAAisB,sBAAA,SAAsBhuB,EAAYiR,GAC9BA,EAAWhB,UAAYjQ,EAElBc,KAAKyrB,iBACNzrB,KAAK+f,GAAGnX,WAIhBuiB,EAAAlqB,UAAAksB,qBAAA,SAAqBhe,GACCnP,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQqE,UAAYA,EAC3DnP,KAAK+f,GAAGnX,UACR5I,KAAKotB,QAGTjC,EAAAlqB,UAAAosB,sBAAA,SAAsBhjB,GAClB,IAAIlH,EAAuBkH,EAAM4B,OAEjC,OAAO5B,EAAM+S,KACT,IAAK,YACD,IAAIkQ,EAAWttB,KAAKutB,aAAapqB,GAC7BmqB,IACAnqB,EAAKqqB,gBAAgB,YACrBF,EAASG,SAAW,IACpBH,EAAS7I,SAGbpa,EAAMiL,iBACV,MAEA,IAAK,UACD,IAAIoY,EAAW1tB,KAAK2tB,aAAaxqB,GAC7BuqB,IACAvqB,EAAKqqB,gBAAgB,YACrBE,EAASD,SAAW,IACpBC,EAASjJ,SAGbpa,EAAMiL,mBAKlB6V,EAAAlqB,UAAA2sB,oBAAA,WACI5tB,KAAKosB,cACLpsB,KAAKotB,QAGTjC,EAAAlqB,UAAA4sB,uBAAA,SAAuB1e,GACnB,OAAyBnP,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQqE,YAAcA,GAGxEgc,EAAAlqB,UAAA6sB,cAAA,WACwB9tB,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQpL,KAAK,CAACR,MAAO,KAAMiQ,UAAWnP,KAAKitB,sBAAuBxc,SAAUzQ,KAAK+tB,uBAC1H/tB,KAAK+f,GAAGnX,WAGZuiB,EAAAlqB,UAAA+sB,iBAAA,SAAiB7d,GACbnQ,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAA6B9K,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQ4C,QAAO,SAAA6C,GAAQ,OAAAA,IAASJ,KACvGnQ,KAAK+f,GAAGnX,WAGZuiB,EAAAlqB,UAAAgtB,iBAAA,SAAiB/uB,GAAjB,IAAAoH,EAAAtG,KACwBA,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQtE,SAAQ,SAAA2J,GACrDA,EAAWM,SAAWvR,EACtBoH,EAAKmK,SAAWvR,KAGfc,KAAKyrB,iBACNzrB,KAAK+f,GAAGnX,WAIhBuiB,EAAAlqB,UAAAitB,WAAA,WACIluB,KAAKmuB,gBAAkBnuB,KAAKmuB,gBAGhChD,EAAAlqB,UAAAmtB,sBAAA,SAAsB/jB,GAClB,OAAOA,EAAM+S,KACT,IAAK,SACL,IAAK,MACDpd,KAAKmuB,gBAAiB,EAC1B,MAEA,IAAK,YACD,GAAInuB,KAAKmuB,eAAgB,CACrB,IAAIE,EAAY/hB,EAAAA,WAAWgiB,qBAAqBtuB,KAAKuuB,SACjDF,GACAA,EAAU,GAAG5J,QAEjBpa,EAAMiL,sBAEDjL,EAAMmkB,SACXxuB,KAAKmuB,gBAAiB,EACtB9jB,EAAMiL,oBAMtB6V,EAAAlqB,UAAAwtB,SAAA,WACIzuB,KAAKmuB,gBAAiB,EACtBnuB,KAAK0uB,KAAK7Y,cAAc4O,SAG5B0G,EAAAlqB,UAAAssB,aAAA,SAAapqB,GACT,IAAImqB,EAA2BnqB,EAAK6T,mBAEpC,OAAIsW,EACOhhB,EAAAA,WAAWC,SAAS+gB,EAAU,6BAAgCttB,KAAKutB,aAAaD,GAAYA,EAE5FnqB,EAAKkJ,cAAcwc,mBAGlCsC,EAAAlqB,UAAA0sB,aAAA,SAAaxqB,GACT,IAAIuqB,EAA2BvqB,EAAKuY,uBAEpC,OAAIgS,EACOphB,EAAAA,WAAWC,SAASmhB,EAAU,6BAAgC1tB,KAAK2tB,aAAaD,GAAYA,EAEhGvqB,EAAKkJ,cAAcsc,kBAG9BwC,EAAAlqB,UAAA0tB,wBAAA,SAAwBtkB,GACpB,OAAQA,EAAMukB,SACV,IAAK,UACD5uB,KAAKuuB,QAAUlkB,EAAM2N,QAErBjF,SAASI,KAAKC,YAAYpT,KAAKuuB,SAC/BvuB,KAAKuuB,QAAQtb,MAAM4b,OAAS5kB,SAASqC,EAAAA,WAAWwiB,QAChDxiB,EAAAA,WAAWyiB,iBAAiB/uB,KAAKuuB,QAASvuB,KAAK0uB,KAAK7Y,eACpD7V,KAAKgvB,4BACLhvB,KAAKivB,6BACLjvB,KAAKkvB,qBACT,MAEA,IAAK,OACDlvB,KAAKmvB,kBAKjBhE,EAAAlqB,UAAAgsB,oBAAA,WACI,OAAIjtB,KAAKmP,UACEnP,KAAKmP,UAGM,SAAdnP,KAAK2N,KACEwD,EAAAA,gBAAgBC,YACJ,YAAdpR,KAAK2N,KACHwD,EAAAA,gBAAgBie,OACJ,SAAdpvB,KAAK2N,KACHwD,EAAAA,gBAAgBke,QAEhBle,EAAAA,gBAAgBme,UAInCnE,EAAAlqB,UAAA8sB,mBAAA,WACI,OAAO/tB,KAAK+f,GAAGtc,QAA8BzD,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQ,GAAG2F,SAAUzQ,KAAKyQ,UAGhG0a,EAAAlqB,UAAAsuB,aAAA,WACI,OAAOvvB,KAAK+f,GAAGtc,QAAQzD,KAAK8K,SAAW9K,KAAK+f,GAAGzQ,cAA+BtP,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAQ5L,QAG/GZ,OAAAkL,eAAI2hB,EAAAlqB,UAAA,mBAAgB,KAApB,WACI,OAAOjB,KAAK+f,GAAGtc,QAA6BzD,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OAAS,sCAG9ExM,OAAAkL,eAAI2hB,EAAAlqB,UAAA,iBAAc,KAAlB,WACI,QAAOjB,KAAKwvB,kBAAmBxvB,KAAKwvB,iBAAiBxwB,OAAS,mCAGlEV,OAAAkL,eAAI2hB,EAAAlqB,UAAA,iBAAc,KAAlB,WACI,OAAOjB,KAAKsrB,WAA8B,QAAjBtrB,KAAKkT,SAAkC,YAAdlT,KAAK2N,uCAG3DrP,OAAAkL,eAAI2hB,EAAAlqB,UAAA,iBAAc,KAAlB,WACI,OAAOjB,KAAKurB,cAA8B,YAAdvrB,KAAK2N,sCAGrCrP,OAAAkL,eAAI2hB,EAAAlqB,UAAA,sBAAmB,KAAvB,WACI,OAAOjB,KAAK2rB,eAA+B,YAAd3rB,KAAK2N,MAAuB3N,KAAKwvB,kBAAoBxvB,KAAKwvB,iBAAiBxwB,OAASgB,KAAK6rB,gDAG1HvtB,OAAAkL,eAAI2hB,EAAAlqB,UAAA,mBAAgB,KAApB,WACI,OAAOjB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgB6C,wCAGtDnxB,OAAAkL,eAAI2hB,EAAAlqB,UAAA,mBAAgB,KAApB,WACI,OAAOjB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgB8C,wCAGtDpxB,OAAAkL,eAAI2hB,EAAAlqB,UAAA,qBAAkB,KAAtB,WACI,OAAOjB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgB+C,2CAGtDrxB,OAAAkL,eAAI2hB,EAAAlqB,UAAA,wBAAqB,KAAzB,WACI,OAAOjB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgBgD,8CAGtDtxB,OAAAkL,eAAI2hB,EAAAlqB,UAAA,gBAAa,KAAjB,WACI,OAAOjB,KAAKqrB,OAAOqB,eAAeE,EAAAA,gBAAgBiD,4CAGtD1E,EAAAlqB,UAAA0H,UAAA,WACI,IAAImnB,EAAc9vB,KAAK+f,GAAGtc,QAAQzD,KAAK8K,OACvC,QAAIglB,IACIjmB,MAAMC,QAAQgmB,IACN9vB,KAAK+f,GAAGzQ,cAAkCwgB,EAAa,GAAG5wB,QAE1Dc,KAAK+f,GAAGzQ,cAAcwgB,EAAY5wB,SAMtDisB,EAAAlqB,UAAA8uB,iBAAA,SAAiB1lB,GACb,QAASrK,KAAKuuB,QAAQyB,WAAW3lB,EAAM4B,SAAWjM,KAAKuuB,QAAQ0B,SAAS5lB,EAAM4B,SACvEjM,KAAK0uB,KAAK7Y,cAAcma,WAAW3lB,EAAM4B,SAAWjM,KAAK0uB,KAAK7Y,cAAcoa,SAAS5lB,EAAM4B,SAC3FK,EAAAA,WAAWC,SAASlC,EAAM4B,OAAQ,+BAAiCK,EAAAA,WAAWC,SAASlC,EAAM4B,OAAOI,cAAe,+BACnHC,EAAAA,WAAWC,SAASlC,EAAM4B,OAAQ,kCAAoCK,EAAAA,WAAWC,SAASlC,EAAM4B,OAAOI,cAAe,mCAGjI8e,EAAAlqB,UAAA+tB,0BAAA,WAAA,IAAA1oB,EAAAtG,KACI,IAAKA,KAAKkwB,sBAAuB,CAC7B,IAAMC,EAAsBnwB,KAAK8B,GAAK9B,KAAK8B,GAAG+T,cAAcua,cAAgB,WAE5EpwB,KAAKkwB,sBAAwBlwB,KAAKorB,SAASiF,OAAOF,EAAgB,aAAa,SAAA9lB,GACvE/D,EAAKypB,iBAAiB1lB,IACtB/D,EAAK8mB,YAMrBjC,EAAAlqB,UAAAqvB,4BAAA,WACQtwB,KAAKkwB,wBACLlwB,KAAKkwB,wBACLlwB,KAAKkwB,sBAAwB,OAIrC/E,EAAAlqB,UAAAguB,2BAAA,WAAA,IAAA3oB,EAAAtG,KACIA,KAAKuwB,uBAAyB,WAAM,OAAAjqB,EAAK8mB,QACzCza,OAAOoC,iBAAiB,SAAU/U,KAAKuwB,yBAG3CpF,EAAAlqB,UAAAuvB,6BAAA,WACQxwB,KAAKuwB,yBACL5d,OAAOqC,oBAAoB,SAAUhV,KAAKuwB,wBAC1CvwB,KAAKuwB,uBAAyB,OAItCpF,EAAAlqB,UAAAiuB,mBAAA,WAAA,IAAA5oB,EAAAtG,KACSA,KAAKywB,gBACNzwB,KAAKywB,cAAgB,IAAIC,EAAAA,8BAA8B1wB,KAAK0uB,KAAK7Y,eAAe,WACxEvP,EAAK6nB,gBACL7nB,EAAK8mB,WAKjBptB,KAAKywB,cAAcvB,sBAGvB/D,EAAAlqB,UAAA0vB,qBAAA,WACQ3wB,KAAKywB,eACLzwB,KAAKywB,cAAcE,wBAI3BxF,EAAAlqB,UAAAmsB,KAAA,WACIptB,KAAKmuB,gBAAiB,GAG1BhD,EAAAlqB,UAAAkuB,cAAA,WACInvB,KAAKswB,8BACLtwB,KAAKwwB,+BACLxwB,KAAK2wB,uBACL3wB,KAAKuuB,QAAU,MAGnBpD,EAAAlqB,UAAAmrB,YAAA,WACIpsB,KAAK8rB,4BACL9rB,KAAK+f,GAAGnX,UACJ5I,KAAK4rB,aACL5rB,KAAKotB,QAGbjC,EAAAlqB,UAAA2vB,YAAA,WACI5wB,KAAK+f,GAAGnX,UACR5I,KAAKotB,QAGTjC,EAAAlqB,UAAAyd,YAAA,WACQ1e,KAAKuuB,UACLvuB,KAAK8B,GAAG+T,cAAczC,YAAYpT,KAAKuuB,SACvCvuB,KAAKmvB,iBAGLnvB,KAAK+rB,yBACL/rB,KAAK+rB,wBAAwB5L,cAG7BngB,KAAKmsB,mBACLnsB,KAAKmsB,kBAAkBhM,wCAzflCxB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,iBACVlY,SAAU,kpKA4CVkqB,WAAY,CACRC,EAAAA,QAAQ,mBAAoB,CACxBC,EAAAA,WAAW,SAAU,CACjB9d,EAAAA,MAAM,CAAC+d,QAAS,EAAGC,UAAW,gBAC9BC,EAAAA,QAAQ,qCAEZH,EAAAA,WAAW,SAAU,CACjBG,EAAAA,QAAQ,aAAcje,EAAAA,MAAM,CAAE+d,QAAS,UAInD9R,cAAeC,EAAAA,kBAAkBC,kDAxiIJC,EAAAA,kBAgmIiBxd,SAhmIuJsvB,EAAAA,iBAGtHC,EAAAA,gDAyiI9E3R,EAAAA,oBAEAA,EAAAA,uBAEAA,EAAAA,wBAEAA,EAAAA,yBAEAA,EAAAA,wBAEAA,EAAAA,4BAEAA,EAAAA,+BAEAA,EAAAA,+BAEAA,EAAAA,8BAEAA,EAAAA,6BAEAA,EAAAA,2BAEAA,EAAAA,2BAEAA,EAAAA,gCAEAA,EAAAA,8BAEAA,EAAAA,iCAEAA,EAAAA,iCAEAA,EAAAA,sBAEAA,EAAAA,sBAEAA,EAAAA,sBAEAA,EAAAA,6BAEAA,EAAAA,wBAEAA,EAAAA,+BAEAA,EAAAA,2BAEAA,EAAAA,oBAEAE,EAAAA,UAASf,KAAA,CAAC,2BAEVgB,EAAAA,gBAAehB,KAAA,CAACiB,EAAAA,wBAsZrB,iCAPCwR,EAAAA,SAAQzS,KAAA,CAAC,CACN0S,QAAS,CAACC,EAAAA,aAAaC,EAAAA,gBAAgBC,EAAAA,gBAAgBC,EAAAA,eAAeC,EAAAA,gBAAgBC,EAAAA,YAAYC,EAAAA,aAAaC,EAAAA,mBAAmBC,EAAAA,eAAeC,EAAAA,kBAAkBC,EAAAA,wBACnKC,QAAS,CAACrwB,EAAMswB,EAAAA,aAAapP,EAAemB,EAAcoB,EAAWH,EAAeK,EAAgBa,EAAkBY,EAAeoC,EAAWvF,EACxI6F,EAAiBK,EAAcC,EAAoBM,EAAqBC,EAAetF,EAAsB6D,EAAYE,EAAgBE,EAAgBC,EAAkBuI,EAAAA,gBAAgBxG,GACnMiH,aAAc,CAACvwB,EAAMkhB,EAAemB,EAAcoB,EAAWH,EAAeK,EAAgBa,EAAkBY,EAAeoC,EAAWvJ,EAAUM,EAAe0D,EACzJ6F,EAAiBK,EAAcC,EAAoBM,EAAqBC,EAAetF,EAAsB6D,EAAYE,EAAgBE,EAAgBC,EAAkB+B,EAAaN","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { NgModule, Component, HostListener, OnInit, OnDestroy, AfterViewInit, Directive, Optional, AfterContentInit,\n    Input, Output, EventEmitter, ElementRef, ContentChildren, TemplateRef, QueryList, ViewChild, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges, ChangeDetectionStrategy, Query, ViewEncapsulation, Renderer2} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { PrimeTemplate, SharedModule, FilterMatchMode, FilterOperator, SelectItem, PrimeNGConfig, TranslationKeys, FilterService } from 'primeng-lts/api';\nimport { PaginatorModule } from 'primeng-lts/paginator';\nimport { InputTextModule } from 'primeng-lts/inputtext';\nimport { ButtonModule } from 'primeng-lts/button';\nimport { SelectButtonModule } from 'primeng-lts/selectbutton';\nimport { TriStateCheckboxModule } from 'primeng-lts/tristatecheckbox';\nimport { CalendarModule } from 'primeng-lts/calendar';\nimport { InputNumberModule } from 'primeng-lts/inputnumber';\nimport { DropdownModule } from 'primeng-lts/dropdown';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng-lts/dom';\nimport { ObjectUtils } from 'primeng-lts/utils';\nimport { SortMeta } from 'primeng-lts/api';\nimport { TableState } from 'primeng-lts/api';\nimport { FilterMetadata } from 'primeng-lts/api';\nimport { Injectable } from '@angular/core';\nimport { BlockableUI } from 'primeng-lts/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport {trigger,style,transition,animate,AnimationEvent} from '@angular/animations';\n\n@Injectable()\nexport class TableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private valueSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n    private columnsSource = new Subject();\n    private resetSource = new Subject();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    valueSource$ = this.valueSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    columnsSource$ = this.columnsSource.asObservable();\n    resetSource$ = this.resetSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onResetChange() {\n        this.resetSource.next();\n    }\n\n    onContextMenu(data: any) {\n        this.contextMenuSource.next(data);\n    }\n\n    onValueChange(value: any) {\n        this.valueSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n\n    onColumnsChange(columns: any[]) {\n        this.columnsSource.next(columns);\n    }\n}\n\n@Component({\n    selector: 'p-table',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-datatable-scrollable-body, .p-datatable-unfrozen-view .p-datatable-scrollable-body\"\n            [ngClass]=\"{'p-datatable p-component': true,\n                'p-datatable-hoverable-rows': (rowHover||selectionMode),\n                'p-datatable-auto-layout': autoLayout,\n                'p-datatable-resizable': resizableColumns,\n                'p-datatable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-datatable-scrollable': scrollable,\n                'p-datatable-flex-scrollable': (scrollable && scrollHeight === 'flex'),\n                'p-datatable-responsive': responsive}\">\n            <div class=\"p-datatable-loading-overlay p-component-overlay\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'p-datatable-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-datatable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-datatable-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-datatable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot *ngIf=\"footerTemplate\" class=\"p-datatable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-datatable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-datatable-scrollable-view p-datatable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-datatable-scrollable-view\" #scrollableView [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div *ngIf=\"summaryTemplate\" class=\"p-datatable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-datatable-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-datatable-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TableService],\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./table.css']\n})\nexport class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {\n\n    @Input() frozenColumns: any[];\n\n    @Input() frozenValue: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() paginator: boolean;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() paginatorDropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() showJumpToPageDropdown: boolean;\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() showPageLinks: boolean = true;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() csvSeparator: string = ',';\n\n    @Input() exportFilename: string = 'download';\n\n    @Input() filters: { [s: string]: FilterMetadata | FilterMetadata[] } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterLocale: string;\n\n    @Input() expandedRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() editingRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() rowExpandMode: string = 'multiple';\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 250;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() responsive: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() rowHover: boolean;\n\n    @Input() customSort: boolean;\n\n    @Input() showInitialSortBadge: boolean = true;\n\n    @Input() autoLayout: boolean;\n\n    @Input() exportFunction;\n\n    @Input() stateKey: string;\n\n    @Input() stateStorage: string = 'session';\n\n    @Input() editMode: string = 'cell';\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Output() onRowSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() firstChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() rowsChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() onStateSave: EventEmitter<any> = new EventEmitter();\n\n    @Output() onStateRestore: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: any[] = [];\n\n    _columns: any[];\n\n    _totalRecords: number = 0;\n\n    _first: number = 0;\n\n    _rows: number;\n\n    filteredValue: any[];\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    frozenRowsTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    expandedRowTemplate: TemplateRef<any>;\n\n    frozenExpandedRowTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    paginatorDropdownItemTemplate: TemplateRef<any>;\n\n    selectionKeys: any = {};\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    draggedRowIndex: number;\n\n    droppedRowIndex: number;\n\n    rowDragging: boolean;\n\n    dropPosition: number;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellRowIndex: number;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    anchorRowIndex: number;\n\n    rangeRowIndex: number;\n\n    filterTimeout: any;\n\n    initialized: boolean;\n\n    rowTouched: boolean;\n\n    restoringSort: boolean;\n\n    restoringFilter: boolean;\n\n    stateRestored: boolean;\n\n    columnOrderStateRestored: boolean;\n\n    columnWidthsState: string;\n\n    tableWidthState: string;\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TableService, public cd: ChangeDetectorRef, public filterService: FilterService) {}\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            if (!this.virtualScroll) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n\n            if (this.restoringFilter) {\n                this.restoringFilter = false;\n            }\n        }\n\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'rowexpansion':\n                    this.expandedRowTemplate = item.template;\n                break;\n\n                case 'frozenrows':\n                    this.frozenRowsTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n\n                case 'frozenrowexpansion':\n                    this.frozenExpandedRowTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            if (this.isStateful() && !this.stateRestored) {\n                this.restoreState();\n            }\n\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.tableService.onValueChange(simpleChange.value.currentValue);\n        }\n\n        if (simpleChange.columns) {\n            this._columns = simpleChange.columns.currentValue;\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored ) {\n                this.restoreColumnOrder();\n            }\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple' && (this.initialized || (!this.lazy && !this.virtualScroll))) {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    @Input() get columns(): any[] {\n        return this._columns;\n    }\n    set columns(cols: any[]) {\n        this._columns = cols;\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val: number) {\n        this._first = val;\n    }\n\n    @Input() get rows(): number {\n        return this._rows;\n    }\n    set rows(val: number) {\n        this._rows = val;\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let data of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.firstChange.emit(this.first);\n        this.rowsChange.emit(this.rows);\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n\n            if (this.resetPageOnSort) {\n                this._first = 0;\n                this.firstChange.emit(this._first);\n\n                if (this.scrollable) {\n                    this.resetScrollTop();\n                }\n            }\n\n            this.sortSingle();\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n\n                        if (this.scrollable) {\n                            this.resetScrollTop();\n                        }\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                    }\n                }\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.restoringSort) {\n                this.restoringSort = false;\n            }\n\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                        let result = null;\n\n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                        return (this.sortOrder * result);\n                    });\n\n                    this._value = [...this.value];\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\n                    });\n\n                    this._value = [...this.value];\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    multisortField(data1, data2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        else if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    handleRowClick(event) {\n        let target = (<HTMLElement> event.originalEvent.target);\n        let targetNode = target.nodeName;\n        let parentNode = target.parentElement && target.parentElement.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n            (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                DomHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n\n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                let rowData = event.rowData;\n                let selected = this.isSelected(rowData);\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n\n                if (metaSelection) {\n                    let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n\n                        this.onRowUnselect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row'});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection||[];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n\n                            this._selection = [...this.selection,rowData];\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n\n                        this.onRowSelect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex});\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const rowData = event.rowData;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = rowData;\n                this.contextMenuSelectionChange.emit(rowData);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, data: rowData, index: event.rowIndex});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(rowData);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(rowData);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = rowData;\n                        this.selectionChange.emit(rowData);\n\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                        this.selectionChange.emit(this.selection);\n\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n\n                this.tableService.onSelectionChange();\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event, data: rowData, index: event.rowIndex});\n            }\n        }\n    }\n\n    selectRange(event: MouseEvent, rowIndex: number) {\n        let rangeStart, rangeEnd;\n\n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n\n        if (this.lazy && this.paginator) {\n            rangeStart -= this.first;\n            rangeEnd -= this.first;\n        }\n\n        let rangeRowsData = [];\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                rangeRowsData.push(rangeRowData);\n                this._selection = [...this.selection, rangeRowData];\n                let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n        }\n        this.selectionChange.emit(this.selection);\n        this.onRowSelect.emit({originalEvent: event, data: rangeRowsData, type: 'row'});\n    }\n\n    clearSelectionRange(event: MouseEvent) {\n        let rangeStart, rangeEnd;\n\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.value[i];\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\n            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n            let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n            this.onRowUnselect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n        }\n    }\n\n    isSelected(rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(rowData: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleRowWithRadio(event: any, rowData:any) {\n        this.preventSelectionSetterPropagation = true;\n\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n\n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowWithCheckbox(event, rowData: any) {\n        this.selection = this.selection||[];\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n\n        if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowsWithCheckbox(event: Event, check: boolean) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice(): this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    equals(data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n    }\n\n    /* Legacy Filtering for custom elements */\n    filter(value: any, field: string, matchMode: string) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n\n        this.anchorRowIndex = null;\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (!this.restoringFilter) {\n            this.first = 0;\n            this.firstChange.emit(this.first);\n        }\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredValue = [];\n\n                for (let i = 0; i < this.value.length; i++) {\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let localFiltered = false;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            let filterField = prop;\n                            let filterMeta = this.filters[filterField];\n\n                            if (Array.isArray(filterMeta)) {\n                                for (let meta of filterMeta) {\n                                    localMatch = this.executeLocalFilter(filterField, this.value[i], meta);\n\n                                    if ((meta.operator === FilterOperator.OR && localMatch) || (meta.operator === FilterOperator.AND && !localMatch)) {\n                                        break;\n                                    }\n                                }\n                            }\n                            else {\n                                localMatch = this.executeLocalFilter(filterField, this.value[i], filterMeta);\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let globalFilterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            globalMatch = this.filterService.filters[(<FilterMetadata> this.filters['global']).matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), (<FilterMetadata> this.filters['global']).value, this.filterLocale);\n\n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    let matches: boolean;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n\n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful() && !this.restoringFilter) {\n            this.saveState();\n        }\n\n        if (this.restoringFilter) {\n            this.restoringFilter = false;\n        }\n\n        this.cd.markForCheck();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    executeLocalFilter(field: string, rowData: any, filterMeta: FilterMetadata): boolean {\n        let filterValue = filterMeta.value;\n        let filterMatchMode = filterMeta.matchMode || FilterMatchMode.STARTS_WITH;\n        let dataFieldValue = ObjectUtils.resolveFieldData(rowData, field);\n        let filterConstraint = this.filterService.filters[filterMatchMode];\n\n        return filterConstraint(dataFieldValue, filterValue, this.filterLocale);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? (<FilterMetadata> this.filters['global']).value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public clear() {\n        this._sortField = null;\n        this._sortOrder = this.defaultSortOrder;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        if (this.filters['global']) {\n            (<FilterMetadata> this.filters['global']).value = null;\n        }\n        \n        this.filteredValue = null;\n        this.tableService.onResetChange();\n\n        this.first = 0;\n        this.firstChange.emit(this.first);\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    public reset() {\n        this.clear();\n    }\n\n    public exportCSV(options?: any) {\n        let data;\n        let csv = '';\n        let columns = this.frozenColumns ? [...this.frozenColumns, ...this.columns] : this.columns;\n\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n        else {\n            data = this.filteredValue || this.value;\n\n            if (this.frozenValue) {\n                data = data ? [...this.frozenValue, ...data] : this.frozenValue;\n            }\n        }\n\n        //headers\n        for (let i = 0; i < columns.length; i++) {\n            let column = columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n\n                if (i < (columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n\n        //body\n        data.forEach((record, i) => {\n            csv += '\\n';\n            for (let i = 0; i < columns.length; i++) {\n                let column = columns[i];\n                if (column.exportable !== false && column.field) {\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\n\n                    if (cellData != null) {\n                        if (this.exportFunction) {\n                            cellData = this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n\n                    csv += '\"' + cellData + '\"';\n\n                    if (i < (columns.length - 1)) {\n                        csv += this.csvSeparator;\n                    }\n                }\n            }\n        });\n\n        let blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            let link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    updateEditingCell(cell, data, field, index) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.editingCellRowIndex = index;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event, index: this.editingCellRowIndex });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.editingCellRowIndex = null;\n                    this.unbindDocumentEditListener();\n                    this.cd.markForCheck();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    initRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        this.editingRowKeys[dataKeyValue] = true;\n    }\n\n    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement) {\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n            delete this.editingRowKeys[dataKeyValue];\n        }\n    }\n\n    cancelRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        delete this.editingRowKeys[dataKeyValue];\n    }\n\n    toggleRow(rowData: any, event?: Event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n\n            this.expandedRowKeys[dataKeyValue] = true;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    isRowExpanded(rowData: any): boolean {\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isRowEditing(rowData: any): boolean {\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        this.onColumnResize(event);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let minWidth = parseInt(column.style.minWidth || 15);\n\n        if (columnWidth + delta < minWidth) {\n            delta = minWidth - columnWidth;\n        }\n\n        const newColumnWidth = columnWidth + delta;\n\n        if (newColumnWidth >= minWidth) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-datatable-virtual-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (newColumnWidth >= minWidth) {\n                    if (this.scrollable) {\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n                    }\n                    else {\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                        column.style.width = newColumnWidth + 'px';\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                    }\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-header');\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-footer');\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, '.p-datatable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.p-datatable-scrollable-header-table');\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.p-datatable-scrollable-footer-table');\n\n        let frozenWidth = this.frozenWidth ?  parseInt(this.frozenWidth, 10) : 0;\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth - frozenWidth >= scrollableBodyTableWidth;\n\n        let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                table.style.width = width + 'px';\n            }\n        };\n\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n        if (column) {\n            let resizeColumnIndex = DomHandler.index(column);\n\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        }\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-datatable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n                }\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n\n                if (this.isStateful()) {\n                    this.zone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            this.saveState();\n                        });\n                    });\n                }\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    onRowDragStart(event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onRowDragOver(event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n            let pageY = event.pageY;\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n            let prevRowElement = rowElement.previousElementSibling;\n\n            if (pageY < rowMidY) {\n                DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n\n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n\n                this.droppedRowIndex = index + 1;\n                DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\n            }\n        }\n    }\n\n    onRowDragLeave(event, rowElement) {\n        let prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n        }\n\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\n    }\n\n    onRowDragEnd(event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    }\n\n    onRowDrop(event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: dropIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    }\n\n    isEmpty() {\n        let data = this.filteredValue||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n\n    getStorage() {\n        switch(this.stateStorage) {\n            case 'local':\n                return window.localStorage;\n\n            case 'session':\n                return window.sessionStorage;\n\n            default:\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n        }\n    }\n\n    isStateful() {\n        return this.stateKey != null;\n    }\n\n    saveState() {\n        const storage = this.getStorage();\n        let state: TableState = {};\n\n        if (this.paginator) {\n            state.first = this.first;\n            state.rows = this.rows;\n        }\n\n        if (this.sortField) {\n            state.sortField = this.sortField;\n            state.sortOrder = this.sortOrder;\n        }\n\n        if (this.multiSortMeta) {\n            state.multiSortMeta = this.multiSortMeta;\n        }\n\n        if (this.hasFilter()) {\n            state.filters = this.filters;\n        }\n\n        if (this.resizableColumns) {\n            this.saveColumnWidths(state);\n        }\n\n        if (this.reorderableColumns) {\n            this.saveColumnOrder(state);\n        }\n\n        if (this.selection) {\n            state.selection = this.selection;\n        }\n\n        if (Object.keys(this.expandedRowKeys).length) {\n            state.expandedRowKeys = this.expandedRowKeys;\n        }\n\n        storage.setItem(this.stateKey, JSON.stringify(state));\n        this.onStateSave.emit(state);\n    }\n\n    clearState() {\n        const storage = this.getStorage();\n\n        if (this.stateKey) {\n            storage.removeItem(this.stateKey);\n        }\n    }\n\n    restoreState() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        const dateFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n        const reviver = function(key, value) {\n            if (typeof value === \"string\" && dateFormat.test(value)) {\n                return new Date(value);\n            }\n\n            return value;\n        }\n\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString, reviver);\n\n            if (this.paginator) {\n                if (this.first !== undefined) {\n                    this.first = state.first;\n                    this.firstChange.emit(this.first);\n                }\n\n                if (this.rows !== undefined) {\n                    this.rows = state.rows;\n                    this.rowsChange.emit(this.rows);\n                }\n            }\n\n            if (state.sortField) {\n                this.restoringSort = true;\n                this._sortField = state.sortField;\n                this._sortOrder = state.sortOrder;\n            }\n\n            if (state.multiSortMeta) {\n                this.restoringSort = true;\n                this._multiSortMeta = state.multiSortMeta;\n            }\n\n            if (state.filters) {\n                this.restoringFilter = true;\n                this.filters = state.filters;\n            }\n\n            if (this.resizableColumns) {\n                this.columnWidthsState = state.columnWidths;\n                this.tableWidthState = state.tableWidth;\n            }\n\n            if (state.expandedRowKeys) {\n                this.expandedRowKeys = state.expandedRowKeys;\n            }\n\n            if (state.selection) {\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n            }\n\n            this.stateRestored = true;\n\n            this.onStateRestore.emit(state);\n        }\n    }\n\n    saveColumnWidths(state) {\n        let widths = [];\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-thead > tr:first-child > th');\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\n        state.columnWidths = widths.join(',');\n\n        if (this.columnResizeMode === 'expand') {\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.p-datatable-scrollable-header-table').style.width :\n                                                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreColumnWidths() {\n        if (this.columnWidthsState) {\n            let widths = this.columnWidthsState.split(',');\n\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                if (this.scrollable) {\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n                }\n            }\n\n            if (this.scrollable) {\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-scrollable-header-table > colgroup > col');\n                let bodyCols = this.virtualScroll ? DomHandler.find(this.containerViewChild.nativeElement, 'cdk-virtual-scroll-viewport table > colgroup > col') : DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-scrollable-body table > colgroup > col');\n\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\n            }\n            else {\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.p-datatable-thead > tr:first-child > th');\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\n            }\n        }\n    }\n\n    saveColumnOrder(state) {\n        if (this.columns) {\n            let columnOrder: string[] = [];\n            this.columns.map(column => {\n                columnOrder.push(column.field||column.key)\n            });\n\n            state.columnOrder = columnOrder;\n        }\n    }\n\n    restoreColumnOrder() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n            let columnOrder = state.columnOrder;\n            if (columnOrder) {\n                let reorderedColumns = [];\n\n                columnOrder.map(key =>  {\n                    let col = this.findColumnByKey(key);\n                    if (col) {\n                        reorderedColumns.push(col)\n                    }\n                });\n                this.columnOrderStateRestored = true;\n                this.columns = reorderedColumns;\n            }\n        }\n    }\n\n    findColumnByKey(key) {\n        if (this.columns) {\n            for (let col of this.columns) {\n                if (col.key === key || col.field === key)\n                    return col;\n                else\n                    continue;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n}\n\n@Component({\n    selector: '[pTableBody]',\n    template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && !dt.virtualScroll\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && dt.virtualScroll\">\n            <ng-template cdkVirtualFor let-rowData let-rowIndex=\"index\" [cdkVirtualForOf]=\"dt.filteredValue||dt.value\" [cdkVirtualForTrackBy]=\"dt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngTemplateOutlet=\"rowData ? template: dt.loadingBodyTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.expandedRowTemplate && !(frozen && dt.frozenExpandedRowTemplate)\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.frozenExpandedRowTemplate && frozen\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.frozenExpandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableBody implements OnDestroy {\n\n    @Input(\"pTableBody\") columns: any[];\n\n    @Input(\"pTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            if (this.dt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: '[pScrollableView]',\n    template: `\n        <div #scrollHeader class=\"p-datatable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-datatable-scrollable-header-box\">\n                <table class=\"p-datatable-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-datatable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-datatable-tbody\">\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n                        </ng-template>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!dt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-datatable-scrollable-body\" [ngStyle]=\"{'max-height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && dt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"dt.virtualRowHeight\" tabindex=\"0\" [style.height]=\"dt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"dt.minBufferPx\" [maxBufferPx]=\"dt.maxBufferPx\" (scrolledIndexChange)=\"onScrollIndexChange($event)\" class=\"p-datatable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter class=\"p-datatable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-datatable-scrollable-footer-box\">\n                <table class=\"p-datatable-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-datatable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrollableView implements AfterViewInit,OnDestroy {\n\n    @Input(\"pScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener: any;\n\n    bodyScrollListener: any;\n\n    footerScrollListener: any;\n\n    frozenSiblingBody: HTMLDivElement;\n\n    preventBodyScrollPropagation: boolean;\n\n    _scrollHeight: string;\n\n    virtualScrollTimeout: any;\n\n    virtualPage: number;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n\n        if (this.dt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-datatable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.dt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-datatable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-datatable-scrollable-body');\n            }\n\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.dt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    onScrollIndexChange(index: number) {\n        if (this.dt.lazy) {\n            if (this.virtualScrollTimeout) {\n                clearTimeout(this.virtualScrollTimeout);\n            }\n\n            this.virtualScrollTimeout = setTimeout(() => {\n                let page = Math.floor(index / this.dt.rows);\n                let virtualScrollOffset = page === 0 ? 0 : (page - 1) * this.dt.rows;\n                let virtualScrollChunkSize = page === 0 ? this.dt.rows * 2 : this.dt.rows * 3;\n\n                if (page !== this.virtualPage) {\n                    this.virtualPage = page;\n                    this.dt.onLazyLoad.emit({\n                        first: virtualScrollOffset,\n                        rows: virtualScrollChunkSize,\n                        sortField: this.dt.sortField,\n                        sortOrder: this.dt.sortOrder,\n                        filters: this.dt.filters,\n                        globalFilter: this.dt.filters && this.dt.filters['global'] ? (<FilterMetadata> this.dt.filters['global']).value : null,\n                        multiSortMeta: this.dt.multiSortMeta\n                    });\n                }\n            }, this.dt.virtualScrollDelay);\n        }\n    }\n\n    getPageCount() {\n        let dataToRender = this.dt.filteredValue || this.dt.value;\n        let dataLength = dataToRender ? dataToRender.length: 0;\n        return Math.ceil(dataLength / this.dt.rows);\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n    }\n}\n\n@Directive({\n    selector: '[pSortableColumn]',\n    host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"',\n        '[attr.aria-sort]': 'sortOrder'\n    }\n})\nexport class SortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"pSortableColumn\") field: string;\n\n    @Input() pSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    sortOrder: string;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.dt.isSorted(this.field);\n        this.sortOrder = this.sorted ? (this.dt.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled() && !this.isFilterElement(<HTMLElement> event.target)) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.pSortableColumnDisabled !== true;\n    }\n\n    isFilterElement(element: HTMLElement) {\n        return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n\n@Component({\n    selector: 'p-sortIcon',\n    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{getMultiSortMetaIndex() + 1}}</span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class SortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public dt: Table, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            let sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    getMultiSortMetaIndex() {\n        let multiSortMeta = this.dt._multiSortMeta;\n        let index = -1;\n\n        if (multiSortMeta && this.dt.sortMode === 'multiple' && (this.dt.showInitialSortBadge || multiSortMeta.length > 1)) {\n\n            for (let i = 0; i < multiSortMeta.length; i++) {\n                let meta = multiSortMeta[i];\n                if (meta.field === this.field || meta.field === this.field) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isMultiSorted() {\n        return this.dt.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[pSelectableRow]',\n    host: {\n        '[class.p-selectable-row]': 'isEnabled()',\n        '[class.p-highlight]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class SelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRow\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    }\n\n    @HostListener('keydown.arrowdown', ['$event'])\n    onArrowDownKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const nextRow = this.findNextSelectableRow(row);\n\n        if (nextRow) {\n            nextRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.arrowup', ['$event'])\n    onArrowUpKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const prevRow = this.findPrevSelectableRow(row);\n\n        if (prevRow) {\n            prevRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.shift.enter', ['$event'])\n    @HostListener('keydown.meta.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        this.dt.handleRowClick({\n            originalEvent: event,\n            rowData: this.data,\n            rowIndex: this.index\n        });\n    }\n\n    @HostListener('keydown.pagedown')\n    @HostListener('keydown.pageup')\n    @HostListener('keydown.home')\n    @HostListener('keydown.end')\n    onPageDownKeyDown() {\n        if (this.dt.virtualScroll) {\n            DomHandler.findSingle(this.dt.scrollableViewChild.el.nativeElement, 'cdk-virtual-scroll-viewport').focus();\n        }\n    }\n\n    @HostListener('keydown.space')\n    onSpaceKeydown() {\n        if (this.dt.virtualScroll && !this.dt.editingCell) {\n            DomHandler.findSingle(this.dt.scrollableViewChild.el.nativeElement, 'cdk-virtual-scroll-viewport').focus();\n        }\n    }\n\n    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let nextRow = <HTMLTableRowElement> row.nextElementSibling;\n        if (nextRow) {\n            if (DomHandler.hasClass(nextRow, 'p-selectable-row'))\n                return nextRow;\n            else\n                return this.findNextSelectableRow(nextRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let prevRow = <HTMLTableRowElement> row.previousElementSibling;\n        if (prevRow) {\n            if (DomHandler.hasClass(prevRow, 'p-selectable-row'))\n                return prevRow;\n            else\n                return this.findPrevSelectableRow(prevRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pSelectableRowDblClick]',\n    host: {\n        '[class.p-selectable-row]': 'isEnabled()',\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class SelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRowDblClick\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pContextMenuRow]',\n    host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class ContextMenuRow {\n\n    @Input(\"pContextMenuRow\") data: any;\n\n    @Input(\"pContextMenuRowIndex\") index: number;\n\n    @Input() pContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\n                this.selected = this.dt.equals(this.data, data);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pRowToggler]'\n})\nexport class RowToggler {\n\n    @Input('pRowToggler') data: any;\n\n    @Input() pRowTogglerDisabled: boolean;\n\n    constructor(public dt: Table) { }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pRowTogglerDisabled !== true;\n    }\n}\n\n@Directive({\n    selector: '[pResizableColumn]'\n})\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: MouseEvent) {\n        if (event.which === 1) {\n            this.dt.onColumnResizeBegin(event);\n            this.bindDocumentEvents();\n        }\n    }\n\n    onDocumentMouseMove(event: MouseEvent) {\n        this.dt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: MouseEvent) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.pResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[pReorderableColumn]'\n})\nexport class ReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.dt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.pReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableColumn]'\n})\nexport class EditableColumn implements AfterViewInit {\n\n    @Input(\"pEditableColumn\") data: any;\n\n    @Input(\"pEditableColumnField\") field: any;\n\n    @Input(\"pEditableColumnRowIndex\") rowIndex: number;\n\n    @Input() pEditableColumnDisabled: boolean;\n\n    @Input() pFocusCellSelector: string;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.dt.editingCellClick = true;\n\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.dt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    this.closeEditingCell(true, event);\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.dt.onEditInit.emit({field: this.field, data: this.data, index: this.rowIndex});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n\n                if (focusableElement) {\n                    focusableElement.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell(completed, event) {\n        if (completed)\n            this.dt.onEditComplete.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.dt.editingCellRowIndex});\n        else\n            this.dt.onEditCancel.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.dt.editingCellRowIndex});\n\n        DomHandler.removeClass(this.dt.editingCell, 'p-cell-editing');\n        this.dt.editingCell = null;\n        this.dt.editingCellData = null;\n        this.dt.editingCellField = null;\n        this.dt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(true, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.escape', ['$event'])\n    onEscapeKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(false, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.meta.tab', ['$event'])\n    onShiftKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (event.shiftKey)\n                this.moveToPreviousCell(event);\n            else{\n                this.moveToNextCell(event);\n            }\n        }\n    }\n    @HostListener('keydown.arrowdown', ['$event'])\n    onArrowDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            let currentCell = this.findCell(event.target);\n            if (currentCell) {\n                let cellIndex = DomHandler.index(currentCell);\n                let targetCell = this.findNextEditableColumnByIndex(currentCell, cellIndex);\n\n                if (targetCell) {\n                    if (this.dt.isEditingCellValid()) {\n                        this.closeEditingCell(true, event);\n                    }\n\n                    DomHandler.invokeElementMethod(event.target, 'blur');\n                    DomHandler.invokeElementMethod(targetCell, 'click');\n                }\n\n                event.preventDefault();\n            }\n        }\n    }\n\n    @HostListener('keydown.arrowup', ['$event'])\n    onArrowUp(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            let currentCell = this.findCell(event.target);\n            if (currentCell) {\n                let cellIndex = DomHandler.index(currentCell);\n                let targetCell = this.findPrevEditableColumnByIndex(currentCell, cellIndex);\n\n                if (targetCell) {\n                    if (this.dt.isEditingCellValid()) {\n                        this.closeEditingCell(true, event);\n                    }\n\n                    DomHandler.invokeElementMethod(event.target, 'blur');\n                    DomHandler.invokeElementMethod(targetCell, 'click');\n                }\n\n                event.preventDefault();\n            }\n        }\n    }\n\n    @HostListener('keydown.arrowleft', ['$event'])\n    onArrowLeft(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            this.moveToPreviousCell(event);\n        }\n    }\n\n    @HostListener('keydown.arrowright', ['$event'])\n    onArrowRight(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            this.moveToNextCell(event);\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findPreviousEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findNextEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumnByIndex(cell: Element, index: number) {\n        let nextRow = cell.parentElement.nextElementSibling;\n\n        if (nextRow) {\n            let nextCell = nextRow.children[index];\n\n            if (nextCell && DomHandler.hasClass(nextCell, 'p-editable-column')) {\n                return nextCell;\n            }\n\n            return null;\n        }\n        else {\n            return null;\n        }\n    }\n\n    findPrevEditableColumnByIndex(cell: Element, index: number) {\n        let prevRow = cell.parentElement.previousElementSibling;\n\n        if (prevRow) {\n            let prevCell = prevRow.children[index];\n\n            if (prevCell && DomHandler.hasClass(prevCell, 'p-editable-column')) {\n                return prevCell;\n            }\n\n            return null;\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pEditableColumnDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableRow]'\n})\nexport class EditableRow {\n\n    @Input(\"pEditableRow\") data: any;\n\n    @Input() pEditableRowDisabled: boolean;\n\n    constructor(public el: ElementRef) {}\n\n    isEnabled() {\n        return this.pEditableRowDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pInitEditableRow]'\n})\nexport class InitEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.initRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n\n}\n\n@Directive({\n    selector: '[pSaveEditableRow]'\n})\nexport class SaveEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n        event.preventDefault();\n    }\n}\n\n@Directive({\n    selector: '[pCancelEditableRow]'\n})\nexport class CancelEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.cancelRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n}\n\n@Component({\n    selector: 'p-cellEditor',\n    template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class CellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public dt: Table, @Optional() public editableColumn: EditableColumn, @Optional() public editableRow: EditableRow) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    get editing(): boolean {\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\n                (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\n    }\n\n}\n\n@Component({\n    selector: 'p-tableRadioButton',\n    template: `\n        <div class=\"p-radiobutton p-component\" [ngClass]=\"{'p-radiobutton-focused':focused, 'p-radiobutton-disabled': disabled}\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'p-radiobutton-box p-component':true,\n                'p-highlight':checked, 'p-disabled':disabled, 'p-focus': focused}\" role=\"radio\" [attr.aria-checked]=\"checked\">\n                <div class=\"p-radiobutton-icon\"></div>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableRadioButton  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    checked: boolean;\n\n    focused: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused, 'p-checkbox-disabled': disabled}\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\"\n                [attr.required]=\"required\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box p-component':true,\n                'p-highlight':checked, 'p-disabled':disabled, 'p-focus': focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() ariaLabel: string;\n\n    checked: boolean;\n\n    focused: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableHeaderCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused, 'p-checkbox-disabled': isDisabled()}\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"isDisabled()\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': isDisabled(), 'p-focus': focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableHeaderCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    checked: boolean;\n\n    focused: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            if (this.dt.value && this.dt.value.length > 0) {\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\n            }\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n    }\n\n    isDisabled() {\n        return this.disabled || !this.dt.value || !this.dt.value.length;\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        this.cd.markForCheck();\n\n        if (this.dt.filteredValue) {\n            const val = this.dt.filteredValue;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\n        }\n        else {\n            const val = this.dt.value;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n        }\n    }\n\n    isAllFilteredValuesChecked() {\n        if (!this.dt.filteredValue) {\n            return false;\n        }\n        else {\n            for (let rowData of this.dt.filteredValue) {\n                if (!this.dt.isSelected(rowData)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pReorderableRowHandle]'\n})\nexport class ReorderableRowHandle implements AfterViewInit {\n\n    @Input(\"pReorderableRowHandle\") index: number;\n\n    constructor(public el: ElementRef) {}\n\n    ngAfterViewInit() {\n        DomHandler.addClass(this.el.nativeElement, 'p-datatable-reorderablerow-handle');\n    }\n}\n\n@Directive({\n    selector: '[pReorderableRow]'\n})\nexport class ReorderableRow implements AfterViewInit {\n\n    @Input(\"pReorderableRow\") index: number;\n\n    @Input() pReorderableRowDisabled: boolean;\n\n    mouseDownListener: any;\n\n    dragStartListener: any;\n\n    dragEndListener: any;\n\n    dragOverListener: any;\n\n    dragLeaveListener: any;\n\n    dropListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragEndListener = this.onDragEnd.bind(this);\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\n\n            this.dragOverListener = this.onDragOver.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (DomHandler.hasClass(event.target, 'p-datatable-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    }\n\n    onDragStart(event) {\n        this.dt.onRowDragStart(event, this.index);\n    }\n\n    onDragEnd(event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    }\n\n    onDragOver(event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    }\n\n    onDragLeave(event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    }\n\n    isEnabled() {\n        return this.pReorderableRowDisabled !== true;\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n\n        event.preventDefault()\n    }\n}\n\n@Component({\n    selector: 'p-columnFilterFormElement',\n    template: `\n        <ng-container *ngIf=\"filterTemplate; else builtInElement\">\n            <ng-container *ngTemplateOutlet=\"filterTemplate; context: {$implicit: filterConstraint.value, filterCallback: filterCallback}\"></ng-container>\n        </ng-container>\n        <ng-template #builtInElement>\n            <ng-container [ngSwitch]=\"type\">\n                <input *ngSwitchCase=\"'text'\" type=\"text\" pInputText [value]=\"filterConstraint?.value\" (input)=\"onModelChange($event.target.value)\"\n                    (keydown.enter)=\"onTextInputEnterKeyDown($event)\" [attr.placeholder]=\"placeholder\">\n                <p-inputNumber *ngSwitchCase=\"'numeric'\" [ngModel]=\"filterConstraint?.value\" (ngModelChange)=\"onModelChange($event)\" (onKeyDown)=\"onNumericInputKeyDown($event)\" [showButtons]=\"true\" [attr.placeholder]=\"placeholder\"\n                    [minFractionDigits]=\"minFractionDigits\" [maxFractionDigits]=\"maxFractionDigits\" [prefix]=\"prefix\" [suffix]=\"suffix\" [placeholder]=\"placeholder\"\n                    [mode]=\"currency ? 'currency' : 'decimal'\" [locale]=\"locale\" [localeMatcher]=\"localeMatcher\" [currency]=\"currency\" [currencyDisplay]=\"currencyDisplay\" [useGrouping]=\"useGrouping\"></p-inputNumber>\n                <p-triStateCheckbox *ngSwitchCase=\"'boolean'\" [ngModel]=\"filterConstraint?.value\" (ngModelChange)=\"onModelChange($event)\"></p-triStateCheckbox>\n                <p-calendar *ngSwitchCase=\"'date'\" [ngModel]=\"filterConstraint?.value\" (ngModelChange)=\"onModelChange($event)\"></p-calendar>\n            </ng-container>\n        </ng-template>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ColumnFilterFormElement implements OnInit {\n\n    @Input() field: string;\n\n    @Input() type: string;\n\n    @Input() filterConstraint: FilterMetadata;\n\n    @Input() filterTemplate: TemplateRef<any>;\n\n    @Input() placeholder: string;\n\n    @Input() minFractionDigits: number\n\n    @Input() maxFractionDigits: number;\n\n    @Input() prefix: string;\n\n    @Input() suffix: string;\n\n    @Input() locale: string;\n\n    @Input() localeMatcher: string;\n\n    @Input() currency: string;\n\n    @Input() currencyDisplay: string;\n\n    @Input() useGrouping: boolean = true;\n\n    filterCallback: Function;\n\n    constructor(public dt: Table) {}\n\n    ngOnInit() {\n        this.filterCallback = value => {\n            this.filterConstraint.value = value;\n            this.dt._filter();\n        };\n    }\n\n    onModelChange(value: any) {\n        this.filterConstraint.value = value;\n\n        if (this.type === 'boolean' || value === '') {\n            this.dt._filter();\n        }\n    }\n\n    onTextInputEnterKeyDown(event: KeyboardEvent) {\n        this.dt._filter();\n        event.preventDefault();\n    }\n\n    onNumericInputKeyDown(event: KeyboardEvent) {\n        if (event.key === 'Enter') {\n            this.dt._filter();\n            event.preventDefault();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-columnFilter',\n    template: `\n        <div class=\"p-column-filter\" [ngClass]=\"{'p-column-filter-row': display === 'row', 'p-column-filter-menu': display === 'menu'}\">\n            <p-columnFilterFormElement *ngIf=\"display === 'row'\" class=\"p-fluid\" [type]=\"type\" [field]=\"field\" [filterConstraint]=\"dt.filters[field]\" [filterTemplate]=\"filterTemplate\" [placeholder]=\"placeholder\" [minFractionDigits]=\"minFractionDigits\" [maxFractionDigits]=\"maxFractionDigits\" [prefix]=\"prefix\" [suffix]=\"suffix\"\n                                    [locale]=\"locale\"  [localeMatcher]=\"localeMatcher\" [currency]=\"currency\" [currencyDisplay]=\"currencyDisplay\" [useGrouping]=\"useGrouping\"></p-columnFilterFormElement>\n            <button #icon *ngIf=\"showMenuButton\" type=\"button\" class=\"p-column-filter-menu-button p-link\" aria-haspopup=\"true\" [attr.aria-expanded]=\"overlayVisible\"\n                [ngClass]=\"{'p-column-filter-menu-button-open': overlayVisible, 'p-column-filter-menu-button-active': hasFilter()}\"\n                (click)=\"toggleMenu()\" (keydown)=\"onToggleButtonKeyDown($event)\"><span class=\"pi pi-filter-icon pi-filter\"></span></button>\n            <button #icon *ngIf=\"showMenuButton && display === 'row'\" [ngClass]=\"{'p-hidden-space': !hasRowFilter()}\" type=\"button\" class=\"p-column-filter-clear-button p-link\" (click)=\"clearFilter()\"><span class=\"pi pi-filter-slash\"></span></button>\n            <div *ngIf=\"showMenu && overlayVisible\" [ngClass]=\"{'p-column-filter-overlay p-component p-fluid': true, 'p-column-filter-overlay-menu': display === 'menu'}\"\n                [@overlayAnimation]=\"'visible'\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (keydown.escape)=\"onEscape()\">\n                <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: field}\"></ng-container>\n                <ul *ngIf=\"display === 'row'; else menu\" class=\"p-column-filter-row-items\">\n                    <li class=\"p-column-filter-row-item\" *ngFor=\"let matchMode of matchModes; let i = index;\" (click)=\"onRowMatchModeChange(matchMode.value)\" (keydown)=\"onRowMatchModeKeyDown($event)\" (keydown.enter)=\"this.onRowMatchModeChange(matchMode.value)\"\n                        [ngClass]=\"{'p-highlight': isRowMatchModeSelected(matchMode.value)}\" [attr.tabindex]=\"i === 0 ? '0' : null\">{{matchMode.label}}</li>\n                    <li class=\"p-column-filter-separator\"></li>\n                    <li class=\"p-column-filter-row-item\" (click)=\"onRowClearItemClick()\" (keydown)=\"onRowMatchModeKeyDown($event)\" (keydown.enter)=\"onRowClearItemClick()\">{{noFilterLabel}}</li>\n                </ul>\n                <ng-template #menu>\n                    <div class=\"p-column-filter-operator\" *ngIf=\"isShowOperator\">\n                        <p-dropdown [options]=\"operatorOptions\" [ngModel]=\"operator\" (ngModelChange)=\"onOperatorChange($event)\" styleClass=\"p-column-filter-operator-dropdown\"></p-dropdown>\n                    </div>\n                    <div class=\"p-column-filter-constraints\">\n                        <div *ngFor=\"let fieldConstraint of fieldConstraints; let i = index\" class=\"p-column-filter-constraint\">\n                            <p-dropdown  *ngIf=\"showMatchModes && matchModes\" [options]=\"matchModes\" [ngModel]=\"fieldConstraint.matchMode\" (ngModelChange)=\"onMenuMatchModeChange($event, fieldConstraint)\" styleClass=\"p-column-filter-matchmode-dropdown\"></p-dropdown>\n                            <p-columnFilterFormElement [type]=\"type\" [field]=\"field\" [filterConstraint]=\"fieldConstraint\" [filterTemplate]=\"filterTemplate\" [placeholder]=\"placeholder\"\n                            [minFractionDigits]=\"minFractionDigits\" [maxFractionDigits]=\"maxFractionDigits\" [prefix]=\"prefix\" [suffix]=\"suffix\"\n                            [locale]=\"locale\"  [localeMatcher]=\"localeMatcher\" [currency]=\"currency\" [currencyDisplay]=\"currencyDisplay\" [useGrouping]=\"useGrouping\"></p-columnFilterFormElement>\n                            <div>\n                                <button *ngIf=\"showRemoveIcon\" type=\"button\" pButton icon=\"pi pi-trash\" class=\"p-column-filter-remove-button p-button-text p-button-danger p-button-sm\" (click)=\"removeConstraint(fieldConstraint)\" pRipple [label]=\"removeRuleButtonLabel\"></button>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"p-column-filter-add-rule\" *ngIf=\"isShowAddConstraint\">\n                        <button type=\"button\" pButton [label]=\"addRuleButtonLabel\" icon=\"pi pi-plus\" class=\"p-column-filter-add-button p-button-text p-button-sm\" (click)=\"addConstraint()\" pRipple></button>\n                    </div>\n                    <div class=\"p-column-filter-buttonbar\">\n                        <button *ngIf=\"showClearButton\" type=\"button\" pButton class=\"p-button-outlined\" (click)=\"clearFilter()\" [label]=\"clearButtonLabel\" pRipple></button>\n                        <button *ngIf=\"showApplyButton\" type=\"button\" pButton (click)=\"applyFilter()\" [label]=\"applyButtonLabel\" pRipple></button>\n                    </div>\n                </ng-template>\n                <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: field}\"></ng-container>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('.12s cubic-bezier(0, 0, 0.2, 1)')\n            ]),\n            transition(':leave', [\n                animate('.1s linear', style({ opacity: 0 }))\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ColumnFilter implements AfterContentInit {\n\n    @Input() field: string;\n\n    @Input() type: string = 'text';\n\n    @Input() display: string = 'row';\n\n    @Input() showMenu: boolean = true;\n\n    @Input() matchMode: string;\n\n    @Input() operator: string = FilterOperator.AND;\n\n    @Input() showOperator: boolean = true;\n\n    @Input() showClearButton: boolean = true;\n\n    @Input() showApplyButton: boolean = true;\n\n    @Input() showMatchModes: boolean = true;\n\n    @Input() showAddButton: boolean = true;\n\n    @Input() hideOnClear: boolean = false;\n\n    @Input() placeholder: string;\n\n    @Input() matchModeOptions: SelectItem[];\n\n    @Input() maxConstraints: number = 2;\n\n    @Input() minFractionDigits: number;\n\n    @Input() maxFractionDigits: number;\n\n    @Input() prefix: string;\n\n    @Input() suffix: string;\n\n    @Input() locale: string;\n\n    @Input() localeMatcher: string;\n\n    @Input() currency: string;\n\n    @Input() currencyDisplay: string;\n\n    @Input() useGrouping: boolean = true;\n\n    @ViewChild('icon') icon: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    constructor(public el: ElementRef, public dt: Table, public renderer: Renderer2, public config: PrimeNGConfig) {}\n\n    headerTemplate: TemplateRef<any>;\n\n    filterTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    operatorOptions: any[];\n\n    overlayVisible: boolean;\n\n    overlay: HTMLElement;\n\n    scrollHandler: any;\n\n    documentClickListener: any;\n\n    documentResizeListener: any;\n\n    matchModes: SelectItem[];\n\n    translationSubscription: Subscription;\n\n    resetSubscription: Subscription;\n\n    ngOnInit() {\n        if (!this.dt.filters[this.field]) {\n            this.initFieldFilterConstraint();\n        }\n\n        this.translationSubscription = this.config.translationObserver.subscribe(() => {\n            this.generateMatchModeOptions();\n            this.generateOperatorOptions();\n        });\n\n        this.resetSubscription = this.dt.tableService.resetSource$.subscribe(() => {\n            this.clearFilter();\n        })\n\n        this.generateMatchModeOptions();\n        this.generateOperatorOptions();\n    }\n\n    generateMatchModeOptions() {\n        this.matchModes = this.matchModeOptions ||\n        this.config.filterMatchModeOptions[this.type]?.map(key => {\n            return {label: this.config.getTranslation(key), value: key}\n        });\n    }\n\n    generateOperatorOptions() {\n        this.operatorOptions = [\n            {label: this.config.getTranslation(TranslationKeys.MATCH_ALL), value: FilterOperator.AND},\n            {label: this.config.getTranslation(TranslationKeys.MATCH_ANY), value: FilterOperator.OR}\n        ];\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'filter':\n                    this.filterTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                default:\n                    this.filterTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    initFieldFilterConstraint() {\n        let defaultMatchMode = this.getDefaultMatchMode();\n        this.dt.filters[this.field] = this.display == 'row' ? {value: null, matchMode: defaultMatchMode} : [{value: null, matchMode: defaultMatchMode, operator: this.operator}];\n    }\n\n    onMenuMatchModeChange(value: any, filterMeta: FilterMetadata) {\n        filterMeta.matchMode = value;\n\n        if (!this.showApplyButton) {\n            this.dt._filter();\n        }\n    }\n\n    onRowMatchModeChange(matchMode: string) {\n        (<FilterMetadata> this.dt.filters[this.field]).matchMode = matchMode;\n        this.dt._filter();\n        this.hide();\n    }\n\n    onRowMatchModeKeyDown(event: KeyboardEvent) {\n        let item = <HTMLLIElement> event.target;\n\n        switch(event.key) {\n            case 'ArrowDown':\n                var nextItem = this.findNextItem(item);\n                if (nextItem) {\n                    item.removeAttribute('tabindex');\n                    nextItem.tabIndex = '0';\n                    nextItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            case 'ArrowUp':\n                var prevItem = this.findPrevItem(item);\n                if (prevItem) {\n                    item.removeAttribute('tabindex');\n                    prevItem.tabIndex = '0';\n                    prevItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n        }\n    }\n\n    onRowClearItemClick() {\n        this.clearFilter();\n        this.hide();\n    }\n\n    isRowMatchModeSelected(matchMode: string) {\n        return (<FilterMetadata> this.dt.filters[this.field]).matchMode === matchMode;\n    }\n\n    addConstraint() {\n        (<FilterMetadata[]> this.dt.filters[this.field]).push({value: null, matchMode: this.getDefaultMatchMode(), operator: this.getDefaultOperator()});\n        this.dt._filter();\n    }\n\n    removeConstraint(filterMeta: FilterMetadata) {\n        this.dt.filters[this.field] = (<FilterMetadata[]> this.dt.filters[this.field]).filter(meta => meta !== filterMeta);\n        this.dt._filter();\n    }\n\n    onOperatorChange(value) {\n        (<FilterMetadata[]> this.dt.filters[this.field]).forEach(filterMeta => {\n            filterMeta.operator = value;\n            this.operator = value;\n        });\n\n        if (!this.showApplyButton) {\n            this.dt._filter();\n        }\n    }\n\n    toggleMenu() {\n        this.overlayVisible = !this.overlayVisible;\n    }\n\n    onToggleButtonKeyDown(event: KeyboardEvent) {\n        switch(event.key) {\n            case 'Escape':\n            case 'Tab':\n                this.overlayVisible = false;\n            break;\n\n            case 'ArrowDown':\n                if (this.overlayVisible) {\n                    let focusable = DomHandler.getFocusableElements(this.overlay);\n                    if (focusable) {\n                        focusable[0].focus();\n                    }\n                    event.preventDefault();\n                }\n                else if (event.altKey) {\n                    this.overlayVisible = true;\n                    event.preventDefault();\n                }\n            break;\n        }\n    }\n\n    onEscape() {\n        this.overlayVisible = false;\n        this.icon.nativeElement.focus();\n    }\n\n    findNextItem(item: HTMLLIElement) {\n        let nextItem = <HTMLLIElement> item.nextElementSibling;\n\n        if (nextItem)\n            return DomHandler.hasClass(nextItem, 'p-column-filter-separator')  ? this.findNextItem(nextItem) : nextItem;\n        else\n            return item.parentElement.firstElementChild;\n    }\n\n    findPrevItem(item: HTMLLIElement) {\n        let prevItem = <HTMLLIElement> item.previousElementSibling;\n\n        if (prevItem)\n            return DomHandler.hasClass(prevItem, 'p-column-filter-separator')  ? this.findPrevItem(prevItem) : prevItem;\n        else\n        return item.parentElement.lastElementChild;\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n\n                document.body.appendChild(this.overlay);\n                this.overlay.style.zIndex = String(++DomHandler.zindex);\n                DomHandler.absolutePosition(this.overlay, this.icon.nativeElement)\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n                this.bindScrollListener();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    getDefaultMatchMode(): string {\n        if (this.matchMode) {\n            return this.matchMode;\n        }\n        else {\n            if (this.type === 'text')\n                return FilterMatchMode.STARTS_WITH;\n            else if (this.type === 'numeric')\n                return FilterMatchMode.EQUALS;\n            else if (this.type === 'date')\n                return FilterMatchMode.DATE_IS;\n            else\n                return FilterMatchMode.CONTAINS;\n        }\n    }\n\n    getDefaultOperator(): string {\n        return this.dt.filters ? (<FilterMetadata[]> this.dt.filters[this.field])[0].operator: this.operator;\n    }\n\n    hasRowFilter() {\n        return this.dt.filters[this.field] && !this.dt.isFilterBlank((<FilterMetadata>this.dt.filters[this.field]).value);\n    }\n\n    get fieldConstraints(): FilterMetadata[] {\n        return this.dt.filters ? <FilterMetadata[]> this.dt.filters[this.field] : null;\n    }\n\n    get showRemoveIcon(): boolean {\n        return this.fieldConstraints ? this.fieldConstraints.length > 1 : false;\n    }\n\n    get showMenuButton(): boolean {\n        return this.showMenu && (this.display === 'row' ? this.type !== 'boolean': true);\n    }\n\n    get isShowOperator(): boolean {\n        return this.showOperator && this.type !== 'boolean';\n    }\n\n    get isShowAddConstraint(): boolean {\n        return this.showAddButton && this.type !== 'boolean' && (this.fieldConstraints && this.fieldConstraints.length < this.maxConstraints);\n    }\n\n    get applyButtonLabel(): string {\n        return this.config.getTranslation(TranslationKeys.APPLY);\n    }\n\n    get clearButtonLabel(): string {\n        return this.config.getTranslation(TranslationKeys.CLEAR);\n    }\n\n    get addRuleButtonLabel(): string {\n        return this.config.getTranslation(TranslationKeys.ADD_RULE);\n    }\n\n    get removeRuleButtonLabel(): string {\n        return this.config.getTranslation(TranslationKeys.REMOVE_RULE);\n    }\n\n    get noFilterLabel(): string {\n        return this.config.getTranslation(TranslationKeys.NO_FILTER);\n    }\n\n    hasFilter(): boolean {\n        let fieldFilter = this.dt.filters[this.field];\n        if (fieldFilter) {\n            if (Array.isArray(fieldFilter))\n                return !this.dt.isFilterBlank((<FilterMetadata[]> fieldFilter)[0].value);\n            else\n                return !this.dt.isFilterBlank(fieldFilter.value);\n        }\n\n        return false;\n    }\n\n    isOutsideClicked(event): boolean {\n        return !(this.overlay.isSameNode(event.target) || this.overlay.contains(event.target)\n            || this.icon.nativeElement.isSameNode(event.target) || this.icon.nativeElement.contains(event.target)\n            || DomHandler.hasClass(event.target, 'p-column-filter-add-button') || DomHandler.hasClass(event.target.parentElement, 'p-column-filter-add-button')\n            || DomHandler.hasClass(event.target, 'p-column-filter-remove-button') || DomHandler.hasClass(event.target.parentElement, 'p-column-filter-remove-button'));\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'mousedown', event => {\n                if (this.isOutsideClicked(event)) {\n                    this.hide();\n                }\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = () => this.hide();\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.icon.nativeElement, () => {\n                if (this.overlayVisible) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    hide() {\n        this.overlayVisible = false;\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.overlay = null;\n    }\n\n    clearFilter() {\n        this.initFieldFilterConstraint();\n        this.dt._filter();\n        if (this.hideOnClear)\n            this.hide();\n    }\n\n    applyFilter() {\n        this.dt._filter();\n        this.hide();\n    }\n\n    ngOnDestroy() {\n        if (this.overlay) {\n            this.el.nativeElement.appendChild(this.overlay);\n            this.onOverlayHide();\n        }\n\n        if (this.translationSubscription) {\n            this.translationSubscription.unsubscribe();\n        }\n\n        if (this.resetSubscription) {\n            this.resetSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,InputTextModule,DropdownModule,ScrollingModule,FormsModule,ButtonModule,SelectButtonModule,CalendarModule,InputNumberModule,TriStateCheckboxModule],\n    exports: [Table,SharedModule,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,SortIcon,\n            TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow,ScrollingModule,ColumnFilter],\n    declarations: [Table,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,TableBody,ScrollableView,SortIcon,\n            TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow,ColumnFilter,ColumnFilterFormElement]\n})\nexport class TableModule { }\n"]}